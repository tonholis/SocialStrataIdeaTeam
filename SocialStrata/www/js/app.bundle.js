!function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.buildings",[])}(),function(){"use strict";angular.module("app.profiles",[])}(),function(){"use strict";angular.module("app.sidemenu",[])}(),function(){"use strict";function n(n,e,i,t){n.data={},n.login=function(){e.login(n.data.username,n.data.password).success(function(n){t.go("app.buildings")}).error(function(n){i.alert({title:"Login failed!",template:"Please check your credentials!"})})}}n.$inject=["$scope","authService","$ionicPopup","$state"],angular.module("app.auth").controller("authController",n)}(),function(){"use strict";function n(n){return{login:function(e,i){var t=n.defer(),l=t.promise;return"user"==e&&"password"==i?t.resolve("Welcome "+e+"!"):t.reject("Wrong credentials!"),l.success=function(n){return l.then(n),l},l.error=function(n){return l.then(null,n),l},l}}}n.$inject=["$q"],angular.module("app.auth").service("authService",n)}(),function(){"use strict";function n(n,e){n.channels=[{name:"Channel 1",id:1},{name:"Channel 2",id:2},{name:"Channel 3",id:3},{name:"Channel 4",id:4},{name:"Channel 5",id:5},{name:"Channel 6",id:6}]}n.$inject=["$scope","$stateParams"],angular.module("app.buildings").controller("buildingController",n)}(),function(){"use strict";function n(n){n.buildings=[{name:"Building 1",id:1},{name:"Building 2",id:2},{name:"Building 3",id:3},{name:"Building 4",id:4},{name:"Building 5",id:5},{name:"Building 6",id:6}]}n.$inject=["$scope"],angular.module("app.buildings").controller("buildingsController",n)}(),function(){"use strict";function n(n){}n.$inject=["$scope"],angular.module("app.profiles").controller("landlordProfileController",n)}(),function(){"use strict";function n(n){}n.$inject=["$scope"],angular.module("app.profiles").controller("tenantProfileController",n)}(),function(){"use strict";function n(n){}n.$inject=["$scope"],angular.module("app.sidemenu").controller("sidemenuController",n)}(),function(){"use strict";angular.module("app",["ionic","app.auth","app.sidemenu","app.buildings"]).run(["$ionicPlatform",function(n){n.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}])}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider",function(n,e){n.state("app",{url:"/app","abstract":!0,templateUrl:"views/sidemenu.html"}).state("app.buildings",{url:"/buildings",views:{menuContent:{templateUrl:"views/buildings.html"}}}).state("app.building",{url:"/buildings/:buildingId",views:{menuContent:{templateUrl:"views/building.html"}}}).state("login",{url:"/login",templateUrl:"views/auth/login.html"}),e.otherwise("/login")}])}();
//# sourceMappingURL=data:application/json;base64,
