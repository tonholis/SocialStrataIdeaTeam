!function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.buildings",["app.firebase"])}(),function(){"use strict";angular.module("app.firebase",[])}(),function(){"use strict";angular.module("app.message",[])}(),function(){"use strict";angular.module("app.profiles",["app.auth"])}(),function(){"use strict";angular.module("app.sidemenu",[])}(),function(){"use strict";angular.module("app.users",["app.auth"])}(),function(){"use strict";function e(e,n,i,t,a,r){e.data={},e.login=function(){t.show(),n.login(e.data.username,e.data.password).success(function(e){t.hide(),a.go("app.buildings")}).error(function(e){r(function(){t.hide()},100);i.alert({title:"Login failed!",template:e.message})})},e.facebookLogin=function(){i.alert({title:"Facebook login",template:"Planned!"})}}e.$inject=["$scope","authService","$ionicPopup","$ionicLoading","$state","$timeout"],angular.module("app.auth").controller("authController",e)}(),function(){"use strict";function e(e,n,i,t,a){var r=firebase.auth();return n.$on("name-changed",function(){var e=firebase.auth().currentUser;null!=e&&firebase.database().ref("users/"+e.uid).set({name:e.displayName,email:e.email,lastActivity:(new Date).getTime()})}),{login:function(t,a){var u=e.defer(),o=u.promise,s=function(e){e.isNew=null==e.displayName,u.resolve(e),i=firebase.auth().currentUser,n.$emit("name-changed")},l=function(e){u.reject(e)};return r.signInWithEmailAndPassword(t,a).then(s,function c(c){"auth/user-not-found"==c.code?r.createUserWithEmailAndPassword(t,a).then(s,l):l(c)}),o.success=function(e){return o.then(e),o},o.error=function(e){return o.then(null,e),o},o},logout:function(){r.signOut(),i=firebase.auth().currentUser},user:function(){return firebase.auth().currentUser}}}e.$inject=["$q","$rootScope","user","buildingsService","selectedBuilding"],angular.module("app.auth").service("authService",e)}(),function(){"use strict";function e(e){return{getChannelsFrom:function(n){return e.fb.database().ref("buildings/"+n+"/channels")}}}e.$inject=["firebaseService"],angular.module("app.buildings").service("buildingChannelsService",e)}(),function(){"use strict";function e(e,n,i,t){var a=t.getChannelsFrom(i.buildingId);n.show(),a.on("value",function(i){var t=i.val();t&&(e.channels=angular.extend(t.common,t.services)),n.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred."});n.hide()})}e.$inject=["$scope","$ionicLoading","$stateParams","buildingChannelsService"],angular.module("app.buildings").controller("buildingController",e)}(),function(){"use strict";function e(e,n,i,t){var a=i.getBuildings();e.selectedKey=t?t.key:null,e.select=function(n,i){e.selectedKey=i.key=n,t=i,e.$emit("building-selected",t)},n.show(),a.on("value",function(i){e.buildings=i.val(),n.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred"});n.hide()})}e.$inject=["$scope","$ionicLoading","buildingsService","selectedBuilding"],angular.module("app.buildings").controller("buildingsController",e)}(),function(){"use strict";function e(e,n){return{getBuildings:function(){return firebase.database().ref("buildings")}}}e.$inject=["firebaseService","$rootScope"],angular.module("app.buildings").service("buildingsService",e)}(),function(){"use strict";function e(){var e={apiKey:"AIzaSyB5q81AGGox4i8-QL2KOtnDDfi05irgcHE",authDomain:"socialstrataideateam.firebaseapp.com",databaseURL:"https://socialstrataideateam.firebaseio.com",storageBucket:""};this.fb=firebase.initializeApp(e)}angular.module("app.firebase").service("firebaseService",e)}(),function(){"use strict";angular.module("app.message")}(),function(){"use strict";function e(){var e={};return e.getMessagesRef=function(){return firebase.database().ref("messages")},e.getMessagesRef=function(){return firebase.database().ref("messages")},e}angular.module("app.message").service("messagesService",e)}(),function(){"use strict";function e(e,n,i,t,a){var r=t.user();e.data={displayName:r?r.displayName:"",email:r?r.email:""},e.update=function(){n.show(),a.updateProfile(e.data).then(function(e){n.hide(),i.alert({title:"ProfileUpdate!",template:e})},function t(t){n.hide(),i.alert({title:"Update failed!",template:t.message})})}}e.$inject=["$scope","$ionicLoading","$ionicPopup","authService","profilesService"],angular.module("app.profiles").controller("profileController",e)}(),function(){"use strict";function e(e,n,i,t){return{updateProfile:function(a){var r=e.defer();return i.user().updateProfile(a).then(function(){r.resolve("Profile updated!"),t=firebase.auth().currentUser,n.$broadcast("name-changed")},function u(u){r.reject(u)}),r.promise}}}e.$inject=["$q","$rootScope","authService","user"],angular.module("app.profiles").service("profilesService",e)}(),function(){"use strict";function e(e,n){e.building={name:"Select a building",address:""},e.$on("building-selected",function(n,i){e.building.name=i.name,e.building.address=i.address}),e.channel=function(e){}}e.$inject=["$scope","$state"],angular.module("app.sidemenu").controller("sidemenuController",e)}(),function(){"use strict";function e(e,n){return{updateProfile:function(i){var t=e.defer();return n.user().updateProfile(i).then(function(){t.resolve("Profile updated!"),user=firebase.auth().currentUser,$rootScope.$broadcast("name-changed")},function a(a){t.reject(a)}),t.promise}}}e.$inject=["$q","authService"],angular.module("app.users").service("usersService",e)}(),function(){"use strict";angular.module("app",["ionic","app.firebase","app.auth","app.message","app.sidemenu","app.buildings","app.profiles"]).value("user",null).value("selectedBuilding",null).run(["$ionicPlatform","$timeout","$rootScope",function(e,n,i){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault(),i.$broadcast("name-changed")})}])}(),function(){"use strict";angular.module("app").run(["$rootScope","$location","authService",function(e,n,i){e.$on("$routeChangeStart",function(e){null==i.user()&&(e.preventDefault(),n.go("login"))})}])}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,n){e.state("app",{url:"/app",cache:!1,"abstract":!0,templateUrl:"views/sidemenu.html"}).state("app.buildings",{url:"/buildings",views:{menuContent:{templateUrl:"views/buildings.html"}}}).state("app.building",{url:"/buildings/:buildingId",views:{menuContent:{templateUrl:"views/building.html"}}}).state("app.profile",{url:"/profile",cache:!1,views:{menuContent:{templateUrl:"views/profile/profile.html"}}}).state("app.logout",{url:"/login",templateProvider:["authService","$state",function(e,n){e.logout(),n.go("login")}]}).state("login",{url:"/login",templateUrl:"views/auth/login.html"}),n.otherwise("/login")}])}();
//# sourceMappingURL=data:application/json;base64,
