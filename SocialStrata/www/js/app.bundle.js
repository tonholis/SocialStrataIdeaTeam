!function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.buildings",[])}(),function(){"use strict";angular.module("app.profiles",[])}(),function(){"use strict";angular.module("app.sidemenu",[])}(),function(){"use strict";function e(e,n,i,t){e.data={},e.login=function(){n.login(e.data.username,e.data.password).success(function(e){t.go("app.buildings")}).error(function(e){i.alert({title:"Login failed!",template:"Please check your credentials!"})})}}e.$inject=["$scope","authService","$ionicPopup","$state"],angular.module("app.auth").controller("authController",e)}(),function(){"use strict";function e(e){return{login:function(n,i){var t=e.defer(),o=t.promise;return"user"==n&&"password"==i?t.resolve("Welcome "+n+"!"):t.reject("Wrong credentials!"),o.success=function(e){return o.then(e),o},o.error=function(e){return o.then(null,e),o},o}}}e.$inject=["$q"],angular.module("app.auth").service("authService",e)}(),function(){"use strict";function e(e,n,i,t){var o=t.fb.database().ref("buildings/"+i.buildingId+"/channels");n.show(),o.on("value",function(i){var t=i.val();t&&(e.channels=angular.extend(t.common,t.services)),n.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred."});n.hide()})}e.$inject=["$scope","$ionicLoading","$stateParams","FirebaseService"],angular.module("app.buildings").controller("buildingController",e)}(),function(){"use strict";function e(e,n,i){var t=i.fb.database().ref("buildings");n.show(),t.on("value",function(i){console.log(i.val()),e.buildings=i.val(),n.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred."});n.hide()})}e.$inject=["$scope","$ionicLoading","FirebaseService"],angular.module("app.buildings").controller("buildingsController",e)}(),function(){"use strict";function e(e){}e.$inject=["$scope"],angular.module("app.profiles").controller("landlordProfileController",e)}(),function(){"use strict";function e(e){}e.$inject=["$scope"],angular.module("app.profiles").controller("tenantProfileController",e)}(),function(){"use strict";function e(e){}e.$inject=["$scope"],angular.module("app.sidemenu").controller("sidemenuController",e)}(),function(){"use strict";angular.module("app",["ionic","app.firebase","app.auth","app.sidemenu","app.buildings"]).run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}])}(),function(){"use strict";angular.module("app.firebase",[]).service("FirebaseService",function(){var e={apiKey:"AIzaSyB5q81AGGox4i8-QL2KOtnDDfi05irgcHE",authDomain:"socialstrataideateam.firebaseapp.com",databaseURL:"https://socialstrataideateam.firebaseio.com",storageBucket:""};this.fb=firebase.initializeApp(e)})}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,n){e.state("app",{url:"/app","abstract":!0,templateUrl:"views/sidemenu.html"}).state("app.buildings",{url:"/buildings",views:{menuContent:{templateUrl:"views/buildings.html"}}}).state("app.building",{url:"/buildings/:buildingId",views:{menuContent:{templateUrl:"views/building.html"}}}).state("login",{url:"/login",templateUrl:"views/auth/login.html"}),n.otherwise("/login")}])}();
//# sourceMappingURL=data:application/json;base64,
