!function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.buildings",["app.firebase"])}(),function(){"use strict";angular.module("app.firebase",[])}(),function(){"use strict";angular.module("monospaced.elastic",[]).constant("msdElasticConfig",{append:""}).directive("msdElastic",["$timeout","$window","msdElasticConfig",function(e,t,a){return{require:"ngModel",restrict:"A, C",link:function(i,n,r,o){function s(){var e=h;f=c,w=getComputedStyle(c),angular.forEach(V,function(t){e+=t+":"+w.getPropertyValue(t)+";"}),$.setAttribute("style",e)}function u(){var t,a,n,r,o;f!==c&&s(),g||(g=!0,$.value=c.value+m,$.style.overflowY=c.style.overflowY,t=""===c.style.height?"auto":parseInt(c.style.height,10),a=getComputedStyle(c).getPropertyValue("width"),"px"===a.substr(a.length-2,2)&&(r=parseInt(a,10)-x.width,$.style.width=r+"px"),n=$.scrollHeight,n>T?(n=T,o="scroll"):C>n&&(n=C),n+=x.height,c.style.overflowY=o||"hidden",t!==n&&(i.$emit("elastic:resize",d,t,n),c.style.height=n+"px"),e(function(){g=!1},1,!1))}function l(){g=!1,u()}var c=n[0],d=n;if("TEXTAREA"===c.nodeName&&t.getComputedStyle){d.css({overflow:"hidden","overflow-y":"hidden","word-wrap":"break-word"});var p=c.value;c.value="",c.value=p;var f,g,m=r.msdElastic?r.msdElastic.replace(/\\n/g,"\n"):a.append,b=angular.element(t),h="position: absolute; top: -999px; right: auto; bottom: auto;left: 0; overflow: hidden; -webkit-box-sizing: content-box;-moz-box-sizing: content-box; box-sizing: content-box;min-height: 0 !important; height: 0 !important; padding: 0;word-wrap: break-word; border: 0;",v=angular.element('<textarea aria-hidden="true" tabindex="-1" style="'+h+'"/>').data("elastic",!0),$=v[0],w=getComputedStyle(c),y=w.getPropertyValue("resize"),S="border-box"===w.getPropertyValue("box-sizing")||"border-box"===w.getPropertyValue("-moz-box-sizing")||"border-box"===w.getPropertyValue("-webkit-box-sizing"),x=S?{width:parseInt(w.getPropertyValue("border-right-width"),10)+parseInt(w.getPropertyValue("padding-right"),10)+parseInt(w.getPropertyValue("padding-left"),10)+parseInt(w.getPropertyValue("border-left-width"),10),height:parseInt(w.getPropertyValue("border-top-width"),10)+parseInt(w.getPropertyValue("padding-top"),10)+parseInt(w.getPropertyValue("padding-bottom"),10)+parseInt(w.getPropertyValue("border-bottom-width"),10)}:{width:0,height:0},I=parseInt(w.getPropertyValue("min-height"),10),P=parseInt(w.getPropertyValue("height"),10),C=Math.max(I,P)-x.height,T=parseInt(w.getPropertyValue("max-height"),10),V=["font-family","font-size","font-weight","font-style","letter-spacing","line-height","text-transform","word-spacing","text-indent"];d.data("elastic")||(T=T&&T>0?T:9e4,$.parentNode!==document.body&&angular.element(document.body).append($),d.css({resize:"none"===y||"vertical"===y?"none":"horizontal"}).data("elastic",!0),"onpropertychange"in c&&"oninput"in c?c.oninput=c.onkeyup=u:c.oninput=u,b.bind("resize",l),i.$watch(function(){return o.$modelValue},function(e){l()}),i.$on("elastic:adjust",function(){s(),l()}),e(u,0,!1),i.$on("$destroy",function(){v.remove(),b.unbind("resize",l)}))}}}}]),angular.module("app.messages",["monospaced.elastic"])}(),function(){"use strict";angular.module("app.profiles",["app.auth"])}(),function(){"use strict";angular.module("app.sidemenu",[])}(),function(){"use strict";angular.module("app.users",["app.auth"])}(),function(){"use strict";function e(e,t,a,i,n,r){e.data={},e.login=function(){i.show(),t.login(e.data.username,e.data.password).success(function(e){i.hide(),n.go("app.buildings")}).error(function(e){r(function(){i.hide()},100);a.alert({title:"Login failed!",template:e.message})})},e.facebookLogin=function(){a.alert({title:"Facebook login",template:"Planned!"})}}e.$inject=["$scope","authService","$ionicPopup","$ionicLoading","$state","$timeout"],angular.module("app.auth").controller("authController",e)}(),function(){"use strict";function e(e,t,a,i){var n=a.fb.auth();return t.$on("name-changed",function(){var e=firebase.auth().currentUser;null!=e&&firebase.database().ref("users/"+e.uid).set({name:e.displayName,email:e.email,lastActivity:(new Date).getTime()})}),{login:function(a,r){var o=e.defer(),s=o.promise,u=function(e){e.isNew=null==e.displayName,o.resolve(e),i=firebase.auth().currentUser,t.$broadcast("name-changed")},l=function(e){o.reject(e)};return n.signInWithEmailAndPassword(a,r).then(u,function c(c){"auth/user-not-found"==c.code?n.createUserWithEmailAndPassword(a,r).then(u,l):l(c)}),s.success=function(e){return s.then(e),s},s.error=function(e){return s.then(null,e),s},s},logout:function(){n.signOut(),i=firebase.auth().currentUser},user:function(){return firebase.auth().currentUser}}}e.$inject=["$q","$rootScope","firebaseService","user"],angular.module("app.auth").service("authService",e)}(),function(){"use strict";function e(e){return{getChannelsFrom:function(t){return e.fb.database().ref("buildings/"+t+"/channels")}}}e.$inject=["firebaseService"],angular.module("app.buildings").service("buildingChannelsService",e)}(),function(){"use strict";function e(e,t,a,i){var n=i.getChannelsFrom(a.buildingId);t.show(),n.on("value",function(a){var i=a.val();i&&(e.channels=angular.extend(i.common,i.services)),t.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred."});t.hide()})}e.$inject=["$scope","$ionicLoading","$stateParams","buildingChannelsService"],angular.module("app.buildings").controller("buildingController",e)}(),function(){"use strict";function e(e,t,a){var i=a.getBuildings();t.show(),i.on("value",function(a){e.buildings=a.val(),t.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred"});t.hide()})}e.$inject=["$scope","$ionicLoading","buildingsService"],angular.module("app.buildings").controller("buildingsController",e)}(),function(){"use strict";function e(e){return{getBuildings:function(){return e.fb.database().ref("buildings")}}}e.$inject=["firebaseService"],angular.module("app.buildings").service("buildingsService",e)}(),function(){"use strict";function e(){var e={apiKey:"AIzaSyB5q81AGGox4i8-QL2KOtnDDfi05irgcHE",authDomain:"socialstrataideateam.firebaseapp.com",databaseURL:"https://socialstrataideateam.firebaseio.com",storageBucket:""};this.fb=firebase.initializeApp(e)}angular.module("app.firebase").service("firebaseService",e)}(),function(){"use strict";function e(e,t,a,i,n,r,o,s,u){function l(){e.messages=[{_id:"535d625f898df4e80e2a125e",text:"Ionic has changed the game for hybrid app development.",userId:"534b8fb2aa5e7afc1b23e69c",date:"2014-04-27T20:02:39.082Z",read:!0,readDate:"2014-12-01T06:27:37.944Z"},{_id:"535f13ffee3b2a68112b9fc0",text:"I like Ionic better than ice cream!",userId:"534b8e5aaa5e7afc1b23e69b",date:"2014-04-29T02:52:47.706Z",read:!0,readDate:"2014-12-01T06:27:37.944Z"},{_id:"546a5843fd4c5d581efa263a",text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",userId:"534b8fb2aa5e7afc1b23e69c",date:"2014-11-17T20:19:15.289Z",read:!0,readDate:"2014-12-01T06:27:38.328Z"},{_id:"54764399ab43d1d4113abfd1",text:"Am I dreaming?",userId:"534b8e5aaa5e7afc1b23e69b",date:"2014-11-26T21:18:17.591Z",read:!0,readDate:"2014-12-01T06:27:38.337Z"},{_id:"547643aeab43d1d4113abfd2",text:"Is this magic?",userId:"534b8fb2aa5e7afc1b23e69c",date:"2014-11-26T21:18:38.549Z",read:!0,readDate:"2014-12-01T06:27:38.338Z"},{_id:"547815dbab43d1d4113abfef",text:"Gee wiz, this is something special.",userId:"534b8e5aaa5e7afc1b23e69b",date:"2014-11-28T06:27:40.001Z",read:!0,readDate:"2014-12-01T06:27:38.338Z"},{_id:"54781c69ab43d1d4113abff0",text:"I think I like Ionic more than I like ice cream!",userId:"534b8fb2aa5e7afc1b23e69c",date:"2014-11-28T06:55:37.350Z",read:!0,readDate:"2014-12-01T06:27:38.338Z"},{_id:"54781ca4ab43d1d4113abff1",text:"Yea, it's pretty sweet",userId:"534b8e5aaa5e7afc1b23e69b",date:"2014-11-28T06:56:36.472Z",read:!0,readDate:"2014-12-01T06:27:38.338Z"},{_id:"5478df86ab43d1d4113abff4",text:"Wow, this is really something huh?",userId:"534b8fb2aa5e7afc1b23e69c",date:"2014-11-28T20:48:06.572Z",read:!0,readDate:"2014-12-01T06:27:38.339Z"},{_id:"54781ca4ab43d1d4113abff1",text:"Create amazing apps - ionicframework.com",userId:"534b8e5aaa5e7afc1b23e69b",date:"2014-11-29T06:56:36.472Z",read:!0,readDate:"2014-12-01T06:27:38.338Z"}]}function c(){console.log("keepKeyboardOpen"),g.one("blur",function(){console.log("textarea blur, focus back on it"),g[0].focus()})}e.toUser={_id:"534b8e5aaa5e7afc1b23e69b",pic:"http://ionicframework.com/img/docs/venkman.jpg",channel:a.params.channelId},e.user={_id:"534b8fb2aa5e7afc1b23e69c",pic:"http://ionicframework.com/img/docs/mcfly.jpg",username:"Marty"},e.input={message:localStorage["userMessage-"+e.toUser._id]||""};var d,p,f,g,m=o.$getByHandle("userMessageScroll");e.$on("$ionicView.enter",function(){console.log("UserMessages $ionicView.enter"),l(),s(function(){p=document.body.querySelector("#userMessagesView .bar-footer"),f=document.body.querySelector("#userMessagesView .scroll-content"),g=angular.element(p.querySelector("textarea"))},0),d=u(function(){},2e4)}),e.$on("$ionicView.leave",function(){console.log("leaving UserMessages view, destroying interval"),angular.isDefined(d)&&(u.cancel(d),d=void 0)}),e.$on("$ionicView.beforeLeave",function(){e.input.message&&""!==e.input.message||localStorage.removeItem("userMessage-"+e.toUser._id)}),e.$watch("input.message",function(t,a){console.log("input.message $watch, newValue "+t),t||(t=""),localStorage["userMessage-"+e.toUser._id]=t}),e.sendMessage=function(t){var a={toId:e.toUser._id,text:e.input.message};c(),e.input.message="",a._id=(new Date).getTime(),a.date=new Date,a.username=e.user.username,a.userId=e.user._id,a.pic=e.user.picture,e.messages.push(a),s(function(){c(),m.scrollBottom(!0)},0),s(function(){e.messages.push(MockService.getMockMessage()),c(),m.scrollBottom(!0)},2e3)},e.onMessageHold=function(t,a,i){console.log("onMessageHold"),console.log("message: "+JSON.stringify(i,null,2)),n.show({buttons:[{text:"Copy Text"},{text:"Delete Message"}],buttonClicked:function(t){switch(t){case 0:break;case 1:e.messages.splice(a,1),s(function(){m.resize()},0)}return!0}})},e.viewProfile=function(t){t.userId===e.user._id},e.$on("taResize",function(e,t){if(console.log("taResize"),t){var a=t[0].offsetHeight;if(console.log("taHeight: "+a),p){var i=a+10;i=i>44?i:44,p.style.height=i+"px",f.style.bottom=i+"px"}}})}angular.module("app.messages").controller("messagesController",["$scope","$rootScope","$state","$stateParams","$ionicActionSheet","$ionicPopup","$ionicScrollDelegate","$timeout","$interval",e])}(),function(){"use strict";function e(e){return function(e){return e?e.replace(/\n\r?/g,"<br />"):e}}angular.module("app.messages").filter("nl2br",["$filter",e])}(),function(){"use strict";function e(e){var t={};return t.getMessagesRef=function(){return firebase.database().ref("messages")},t.addMessage=function(t){return e.fb.database().push(t)},t}e.$inject=["firebaseService"],angular.module("app.messages").service("messagesService",e)}(),function(){"use strict";function e(e,t,a,i,n){var r=i.user();e.data={displayName:r?r.displayName:"",email:r?r.email:""},e.update=function(){t.show(),n.updateProfile(e.data).then(function(e){t.hide(),a.alert({title:"ProfileUpdate!",template:e})},function i(i){t.hide(),a.alert({title:"Update failed!",template:i.message})})}}e.$inject=["$scope","$ionicLoading","$ionicPopup","authService","profilesService"],angular.module("app.profiles").controller("profileController",e)}(),function(){"use strict";function e(e,t,a,i){return{updateProfile:function(n){var r=e.defer();return a.user().updateProfile(n).then(function(){r.resolve("Profile updated!"),i=firebase.auth().currentUser,t.$broadcast("name-changed")},function o(o){r.reject(o)}),r.promise}}}e.$inject=["$q","$rootScope","authService","user"],angular.module("app.profiles").service("profilesService",e)}(),function(){"use strict";function e(e,t,a){e.$on("name-changed",function(){e.displayName=t.user().displayName});var i=t.user();e.displayName=i?i.displayName:"Edit Name"}e.$inject=["$scope","authService","messagesService"],angular.module("app.sidemenu").controller("sidemenuController",e)}(),function(){"use strict";function e(e,t){return{updateProfile:function(a){var i=e.defer();return t.user().updateProfile(a).then(function(){i.resolve("Profile updated!"),user=firebase.auth().currentUser,$rootScope.$broadcast("name-changed")},function n(n){i.reject(n)}),i.promise}}}e.$inject=["$q","authService"],angular.module("app.users").service("usersService",e)}(),function(){"use strict";angular.module("app",["ionic","monospaced.elastic","app.firebase","app.auth","app.sidemenu","app.buildings","app.profiles","app.messages"]).value("user",null).run(["$ionicPlatform","$timeout","$rootScope",function(e,t,a){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault(),a.$broadcast("name-changed")})}])}(),function(){"use strict";angular.module("app").run(["$rootScope","$location","authService",function(e,t,a){e.$on("$routeChangeStart",function(e){null==a.user()&&(e.preventDefault(),t.go("login"))})}])}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("app",{url:"/app",cache:!1,"abstract":!0,templateUrl:"views/sidemenu.html"}).state("app.buildings",{url:"/buildings",views:{menuContent:{templateUrl:"views/buildings.html"}}}).state("app.building",{url:"/buildings/:buildingId",views:{menuContent:{templateUrl:"views/building.html"}}}).state("app.channel",{url:"/buildings/:buildingId/:channelId",views:{menuContent:{templateUrl:"views/messages/chat.html"}}}).state("app.profile",{url:"/profile",cache:!1,views:{menuContent:{templateUrl:"views/profile/profile.html"}}}).state("app.logout",{url:"/login",templateProvider:["authService","$state",function(e,t){e.logout(),t.go("login")}]}).state("login",{url:"/login",templateUrl:"views/auth/login.html"}),t.otherwise("/login")}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGgvYXV0aC5tb2R1bGUuanMiLCJidWlsZGluZ3MvYnVpbGRpbmdzLm1vZHVsZS5qcyIsImZpcmViYXNlL2ZpcmViYXNlLm1vZHVsZS5qcyIsIm1lc3NhZ2VzL21lc3NhZ2VzLm1vZHVsZS5qcyIsInByb2ZpbGUvcHJvZmlsZXMubW9kdWxlLmpzIiwic2lkZW1lbnUvc2lkZW1lbnUubW9kdWxlLmpzIiwidXNlcnMvdXNlcnMubW9kdWxlLmpzIiwiYXV0aC9hdXRoQ29udHJvbGxlci5qcyIsImFwcC5idW5kbGUuanMiLCJhdXRoL2F1dGhTZXJ2aWNlLmpzIiwiYnVpbGRpbmdzL2J1aWxkaW5nQ2hhbm5lbHNTZXJ2aWNlLmpzIiwiYnVpbGRpbmdzL2J1aWxkaW5nQ29udHJvbGxlci5qcyIsImJ1aWxkaW5ncy9idWlsZGluZ3NDb250cm9sbGVyLmpzIiwiYnVpbGRpbmdzL2J1aWxkaW5nc1NlcnZpY2UuanMiLCJmaXJlYmFzZS9maXJlYmFzZVNlcnZpY2UuanMiLCJtZXNzYWdlcy9tZXNzYWdlc0NvbnRyb2xsZXIuanMiLCJtZXNzYWdlcy9tZXNzYWdlc0ZpbHRlcnMuanMiLCJtZXNzYWdlcy9tZXNzYWdlc1NlcnZpY2UuanMiLCJwcm9maWxlL3Byb2ZpbGVDb250cm9sbGVyLmpzIiwicHJvZmlsZS9wcm9maWxlc1NlcnZpY2UuanMiLCJzaWRlbWVudS9zaWRlbWVudUNvbnRyb2xsZXIuanMiLCJ1c2Vycy91c2Vyc1NlcnZpY2UuanMiLCJhcHAubW9kdWxlLmpzIiwiYXBwLnJvdXRlci5maWx0ZXIuanMiLCJhcHAucm91dGVyLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25zdGFudCIsImFwcGVuZCIsImRpcmVjdGl2ZSIsIiR0aW1lb3V0IiwiJHdpbmRvdyIsImNvbmZpZyIsInJlcXVpcmUiLCJyZXN0cmljdCIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsIm5nTW9kZWwiLCJpbml0TWlycm9yIiwibWlycm9yU3R5bGUiLCJtaXJyb3JJbml0U3R5bGUiLCJtaXJyb3JlZCIsInRhIiwidGFTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJmb3JFYWNoIiwiY29weVN0eWxlIiwidmFsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm1pcnJvciIsInNldEF0dHJpYnV0ZSIsImFkanVzdCIsInRhSGVpZ2h0IiwidGFDb21wdXRlZFN0eWxlV2lkdGgiLCJtaXJyb3JIZWlnaHQiLCJ3aWR0aCIsIm92ZXJmbG93IiwiYWN0aXZlIiwidmFsdWUiLCJzdHlsZSIsIm92ZXJmbG93WSIsImhlaWdodCIsInBhcnNlSW50Iiwic3Vic3RyIiwibGVuZ3RoIiwiYm94T3V0ZXIiLCJzY3JvbGxIZWlnaHQiLCJtYXhIZWlnaHQiLCJtaW5IZWlnaHQiLCIkZW1pdCIsIiR0YSIsImZvcmNlQWRqdXN0Iiwibm9kZU5hbWUiLCJjc3MiLCJvdmVyZmxvdy15Iiwid29yZC13cmFwIiwidGV4dCIsIm1zZEVsYXN0aWMiLCJyZXBsYWNlIiwiJHdpbiIsIiRtaXJyb3IiLCJkYXRhIiwicmVzaXplIiwiYm9yZGVyQm94IiwibWluSGVpZ2h0VmFsdWUiLCJoZWlnaHRWYWx1ZSIsIk1hdGgiLCJtYXgiLCJwYXJlbnROb2RlIiwiZG9jdW1lbnQiLCJib2R5Iiwib25rZXl1cCIsImJpbmQiLCIkd2F0Y2giLCIkbW9kZWxWYWx1ZSIsIm5ld1ZhbHVlIiwiJG9uIiwicmVtb3ZlIiwidW5iaW5kIiwiYXV0aENvbnRyb2xsZXIiLCIkc2NvcGUiLCJhdXRoU2VydmljZSIsIiRpb25pY1BvcHVwIiwiJGlvbmljTG9hZGluZyIsIiRzdGF0ZSIsImxvZ2luIiwic2hvdyIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJzdWNjZXNzIiwidXNlciIsImhpZGUiLCJnbyIsImVycm9yIiwiYWxlcnQiLCJ0aXRsZSIsInRlbXBsYXRlIiwibWVzc2FnZSIsImZhY2Vib29rTG9naW4iLCIkaW5qZWN0IiwiY29udHJvbGxlciIsIiRxIiwiJHJvb3RTY29wZSIsImZpcmViYXNlU2VydmljZSIsImF1dGgiLCJmYiIsInVzciIsImZpcmViYXNlIiwiY3VycmVudFVzZXIiLCJkYXRhYmFzZSIsInJlZiIsInVpZCIsInNldCIsIm5hbWUiLCJkaXNwbGF5TmFtZSIsImVtYWlsIiwibGFzdEFjdGl2aXR5IiwiRGF0ZSIsImdldFRpbWUiLCJkZWZlcnJlZCIsImRlZmVyIiwicHJvbWlzZSIsInN1Y2Nlc3NIYW5kbGVyIiwiaW5mbyIsImlzTmV3IiwicmVzb2x2ZSIsIiRicm9hZGNhc3QiLCJlcnJvckhhbmRsZXIiLCJyZWplY3QiLCJzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZCIsInRoZW4iLCJjb2RlIiwiY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkIiwiZm4iLCJsb2dvdXQiLCJzaWduT3V0Iiwic2VydmljZSIsImJ1aWxkaW5nQ2hhbm5lbHNTZXJ2aWNlIiwiZ2V0Q2hhbm5lbHNGcm9tIiwiYnVpbGRpbmciLCJidWlsZGluZ0NvbnRyb2xsZXIiLCIkc3RhdGVQYXJhbXMiLCJidWlsZGluZ0lkIiwib24iLCJzbmFwc2hvdCIsImNoYW5uZWxzIiwiZXh0ZW5kIiwiY29tbW9uIiwic2VydmljZXMiLCJlcnJvck9iamVjdCIsImNvbnNvbGUiLCJsb2ciLCJidWlsZGluZ3NDb250cm9sbGVyIiwiYnVpbGRpbmdzU2VydmljZSIsImdldEJ1aWxkaW5ncyIsImJ1aWxkaW5ncyIsImFwaUtleSIsImF1dGhEb21haW4iLCJkYXRhYmFzZVVSTCIsInN0b3JhZ2VCdWNrZXQiLCJ0aGlzIiwiaW5pdGlhbGl6ZUFwcCIsIm1lc3NhZ2VzQ29udHJvbGxlciIsIiRpb25pY0FjdGlvblNoZWV0IiwiJGlvbmljU2Nyb2xsRGVsZWdhdGUiLCIkaW50ZXJ2YWwiLCJnZXRNZXNzYWdlcyIsIm1lc3NhZ2VzIiwiX2lkIiwidXNlcklkIiwiZGF0ZSIsInJlYWQiLCJyZWFkRGF0ZSIsImtlZXBLZXlib2FyZE9wZW4iLCJ0eHRJbnB1dCIsIm9uZSIsImZvY3VzIiwidG9Vc2VyIiwicGljIiwiY2hhbm5lbCIsInBhcmFtcyIsImNoYW5uZWxJZCIsImlucHV0IiwibG9jYWxTdG9yYWdlIiwibWVzc2FnZUNoZWNrVGltZXIiLCJmb290ZXJCYXIiLCJzY3JvbGxlciIsInZpZXdTY3JvbGwiLCIkZ2V0QnlIYW5kbGUiLCJxdWVyeVNlbGVjdG9yIiwiaXNEZWZpbmVkIiwiY2FuY2VsIiwidW5kZWZpbmVkIiwicmVtb3ZlSXRlbSIsIm9sZFZhbHVlIiwic2VuZE1lc3NhZ2UiLCJzZW5kTWVzc2FnZUZvcm0iLCJ0b0lkIiwicGljdHVyZSIsInB1c2giLCJzY3JvbGxCb3R0b20iLCJNb2NrU2VydmljZSIsImdldE1vY2tNZXNzYWdlIiwib25NZXNzYWdlSG9sZCIsImUiLCJpdGVtSW5kZXgiLCJKU09OIiwic3RyaW5naWZ5IiwiYnV0dG9ucyIsImJ1dHRvbkNsaWNrZWQiLCJpbmRleCIsInNwbGljZSIsInZpZXdQcm9maWxlIiwibXNnIiwib2Zmc2V0SGVpZ2h0IiwibmV3Rm9vdGVySGVpZ2h0IiwiYm90dG9tIiwibmwyYnIiLCIkZmlsdGVyIiwiZmlsdGVyIiwibWVzc2FnZXNTZXJ2aWNlIiwiZ2V0TWVzc2FnZXNSZWYiLCJhZGRNZXNzYWdlIiwicHJvZmlsZUNvbnRyb2xsZXIiLCJwcm9maWxlc1NlcnZpY2UiLCJ1cGRhdGUiLCJ1cGRhdGVQcm9maWxlIiwic2lkZW1lbnVDb250cm9sbGVyIiwidXNlcnNTZXJ2aWNlIiwicnVuIiwiJGlvbmljUGxhdGZvcm0iLCJyZWFkeSIsIndpbmRvdyIsImNvcmRvdmEiLCJwbHVnaW5zIiwiS2V5Ym9hcmQiLCJoaWRlS2V5Ym9hcmRBY2Nlc3NvcnlCYXIiLCJkaXNhYmxlU2Nyb2xsIiwiU3RhdHVzQmFyIiwic3R5bGVEZWZhdWx0IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwic3RhdGUiLCJ1cmwiLCJjYWNoZSIsImFic3RyYWN0IiwidGVtcGxhdGVVcmwiLCJ2aWV3cyIsIm1lbnVDb250ZW50IiwidGVtcGxhdGVQcm92aWRl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QzlCQSxXQUNBLFlBRUEzSCxTQUVBQyxPQUFBLE9BRUFpTyxLQUFBLGFBQUEsWUFBQSxjQUFBLFNBQUEvSCxFQUFBbEIsRUFBQUgsR0FDQXFCLEVBQUExQixJQUFBLG9CQUFBLFNBQUFvSyxHQUVBLE1BQUEvSixFQUFBUyxTQUNBc0osRUFBQUMsaUJBQ0E3SixFQUFBUSxHQUFBLGtCQ1pBLFdBQ0EsWUFFQXpGLFNBRUFDLE9BQUEsT0FFQU0sUUFBQSxpQkFBQSxxQkFBQSxTQUFBd08sRUFBQUMsR0FFQUQsRUFFQUUsTUFBQSxPQUNBQyxJQUFBLE9BQ0FDLE9BQUEsRUFDQUMsWUFBQSxFQUNBQyxZQUFBLHdCQUdBSixNQUFBLGlCQUNBQyxJQUFBLGFBQ0FJLE9BQ0FDLGFBQ0FGLFlBQUEsMkJBS0FKLE1BQUEsZ0JBQ0FDLElBQUEseUJBQ0FJLE9BQ0FDLGFBQ0FGLFlBQUEsMEJBS0FKLE1BQUEsZUFDQUMsSUFBQSxvQ0FDQUksT0FDQUMsYUFDQUYsWUFBQSwrQkFLQUosTUFBQSxlQUNBQyxJQUFBLFdBQ0FDLE9BQUEsRUFDQUcsT0FDQUMsYUFDQUYsWUFBQSxpQ0FLQUosTUFBQSxjQUNBQyxJQUFBLFNBQ0FNLGtCQUFBLGNBQUEsU0FBQSxTQUFBMUssRUFBQUcsR0FDQUgsRUFBQXFELFNBQ0FsRCxFQUFBUSxHQUFBLGFBR0F3SixNQUFBLFNBQ0FDLElBQUEsU0FDQUcsWUFBQSwwQkFLQUwsRUFBQVMsVUFBQSIsImZpbGUiOiJhcHAuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcC5hdXRoXCIsIFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcC5idWlsZGluZ3NcIiwgWydhcHAuZmlyZWJhc2UnXSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5maXJlYmFzZScsIFtdKTtcbn0pKCk7XG5cblxuXG5cbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdtb25vc3BhY2VkLmVsYXN0aWMnLCBbXSlcbiAgICAgICAgLmNvbnN0YW50KCdtc2RFbGFzdGljQ29uZmlnJywge1xuICAgICAgICAgICAgYXBwZW5kOiAnJ1xuICAgICAgICB9KVxuICAgICAgICAuZGlyZWN0aXZlKCdtc2RFbGFzdGljJywgW1xuICAgICAgICAgICAgJyR0aW1lb3V0JywgJyR3aW5kb3cnLCAnbXNkRWxhc3RpY0NvbmZpZycsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHRpbWVvdXQsICR3aW5kb3csIGNvbmZpZykge1xuICAgICAgICAgICAgICAgICd1c2Ugc3RyaWN0JztcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdBLCBDJyxcbiAgICAgICAgICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWNoZSBhIHJlZmVyZW5jZSB0byB0aGUgRE9NIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YSA9IGVsZW1lbnRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRhID0gZWxlbWVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHRoZSBlbGVtZW50IGlzIGEgdGV4dGFyZWEsIGFuZCBicm93c2VyIGlzIGNhcGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YS5ub2RlTmFtZSAhPT0gJ1RFWFRBUkVBJyB8fCAhJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlc2UgcHJvcGVydGllcyBiZWZvcmUgbWVhc3VyaW5nIGRpbWVuc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICR0YS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dvcmQtd3JhcCc6ICdicmVhay13b3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvcmNlIHRleHQgcmVmbG93XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IHRhLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGEudmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhLnZhbHVlID0gdGV4dDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFwcGVuZCA9IGF0dHJzLm1zZEVsYXN0aWMgPyBhdHRycy5tc2RFbGFzdGljLnJlcGxhY2UoL1xcXFxuL2csICdcXG4nKSA6IGNvbmZpZy5hcHBlbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbiA9IGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXJyb3JJbml0U3R5bGUgPSAncG9zaXRpb246IGFic29sdXRlOyB0b3A6IC05OTlweDsgcmlnaHQ6IGF1dG87IGJvdHRvbTogYXV0bzsnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlZnQ6IDA7IG92ZXJmbG93OiBoaWRkZW47IC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94OyBib3gtc2l6aW5nOiBjb250ZW50LWJveDsnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQ6IDAgIWltcG9ydGFudDsgaGVpZ2h0OiAwICFpbXBvcnRhbnQ7IHBhZGRpbmc6IDA7JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7IGJvcmRlcjogMDsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtaXJyb3IgPSBhbmd1bGFyLmVsZW1lbnQoJzx0ZXh0YXJlYSBhcmlhLWhpZGRlbj1cInRydWVcIiB0YWJpbmRleD1cIi0xXCIgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdHlsZT1cIicgKyBtaXJyb3JJbml0U3R5bGUgKyAnXCIvPicpLmRhdGEoJ2VsYXN0aWMnLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXJyb3IgPSAkbWlycm9yWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNpemUgPSB0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3Jlc2l6ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckJveCA9IHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpID09PSAnYm9yZGVyLWJveCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctbW96LWJveC1zaXppbmcnKSA9PT0gJ2JvcmRlci1ib3gnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLXdlYmtpdC1ib3gtc2l6aW5nJykgPT09ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3hPdXRlciA9ICFib3JkZXJCb3ggPyB7d2lkdGg6IDAsIGhlaWdodDogMH0gOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci1yaWdodC13aWR0aCcpLCAxMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctcmlnaHQnKSwgMTApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWxlZnQnKSwgMTApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdib3JkZXItbGVmdC13aWR0aCcpLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcGFyc2VJbnQodGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdib3JkZXItdG9wLXdpZHRoJyksIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy10b3AnKSwgMTApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWJvdHRvbScpLCAxMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci1ib3R0b20td2lkdGgnKSwgMTApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHRWYWx1ZSA9IHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnbWluLWhlaWdodCcpLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0VmFsdWUgPSBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2hlaWdodCcpLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ID0gTWF0aC5tYXgobWluSGVpZ2h0VmFsdWUsIGhlaWdodFZhbHVlKSAtIGJveE91dGVyLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQgPSBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ21heC1oZWlnaHQnKSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5U3R5bGUgPSBbJ2ZvbnQtZmFtaWx5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZvbnQtc2l6ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb250LXdlaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb250LXN0eWxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xldHRlci1zcGFjaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xpbmUtaGVpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtdHJhbnNmb3JtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dvcmQtc3BhY2luZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWluZGVudCddO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBleGl0IGlmIGVsYXN0aWMgYWxyZWFkeSBhcHBsaWVkIChvciBpcyB0aGUgbWlycm9yIGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRhLmRhdGEoJ2VsYXN0aWMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgcmV0dXJucyBtYXgtaGVpZ2h0IG9mIC0xIGlmIG5vdCBzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IG1heEhlaWdodCAmJiBtYXhIZWlnaHQgPiAwID8gbWF4SGVpZ2h0IDogOWU0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcHBlbmQgbWlycm9yIHRvIHRoZSBET01cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaXJyb3IucGFyZW50Tm9kZSAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KS5hcHBlbmQobWlycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlc2l6ZSBhbmQgYXBwbHkgZWxhc3RpY1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRhLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Jlc2l6ZSc6IChyZXNpemUgPT09ICdub25lJyB8fCByZXNpemUgPT09ICd2ZXJ0aWNhbCcpID8gJ25vbmUnIDogJ2hvcml6b250YWwnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5kYXRhKCdlbGFzdGljJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBtZXRob2RzXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5pdE1pcnJvcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWlycm9yU3R5bGUgPSBtaXJyb3JJbml0U3R5bGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXJyb3JlZCA9IHRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvcHkgdGhlIGVzc2VudGlhbCBzdHlsZXMgZnJvbSB0aGUgdGV4dGFyZWEgdG8gdGhlIG1pcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29weVN0eWxlLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvclN0eWxlICs9IHZhbCArICc6JyArIHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSh2YWwpICsgJzsnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvci5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgbWlycm9yU3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhZGp1c3QoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YUNvbXB1dGVkU3R5bGVXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9ySGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWlycm9yZWQgIT09IHRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRNaXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhY3RpdmUgZmxhZyBwcmV2ZW50cyBhY3Rpb25zIGluIGZ1bmN0aW9uIGZyb20gY2FsbGluZyBhZGp1c3QgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvci52YWx1ZSA9IHRhLnZhbHVlICsgYXBwZW5kOyAvLyBvcHRpb25hbCB3aGl0ZXNwYWNlIHRvIGltcHJvdmUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvci5zdHlsZS5vdmVyZmxvd1kgPSB0YS5zdHlsZS5vdmVyZmxvd1k7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFIZWlnaHQgPSB0YS5zdHlsZS5oZWlnaHQgPT09ICcnID8gJ2F1dG8nIDogcGFyc2VJbnQodGEuc3R5bGUuaGVpZ2h0LCAxMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFDb21wdXRlZFN0eWxlV2lkdGggPSBnZXRDb21wdXRlZFN0eWxlKHRhKS5nZXRQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSBnZXRDb21wdXRlZFN0eWxlIGhhcyByZXR1cm5lZCBhIHJlYWRhYmxlICd1c2VkIHZhbHVlJyBwaXhlbCB3aWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFDb21wdXRlZFN0eWxlV2lkdGguc3Vic3RyKHRhQ29tcHV0ZWRTdHlsZVdpZHRoLmxlbmd0aCAtIDIsIDIpID09PSAncHgnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgbWlycm9yIHdpZHRoIGluIGNhc2UgdGhlIHRleHRhcmVhIHdpZHRoIGhhcyBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHBhcnNlSW50KHRhQ29tcHV0ZWRTdHlsZVdpZHRoLCAxMCkgLSBib3hPdXRlci53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvci5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvckhlaWdodCA9IG1pcnJvci5zY3JvbGxIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pcnJvckhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9ySGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtaXJyb3JIZWlnaHQgPCBtaW5IZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvckhlaWdodCA9IG1pbkhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXJyb3JIZWlnaHQgKz0gYm94T3V0ZXIuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YS5zdHlsZS5vdmVyZmxvd1kgPSBvdmVyZmxvdyB8fCAnaGlkZGVuJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFIZWlnaHQgIT09IG1pcnJvckhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ2VsYXN0aWM6cmVzaXplJywgJHRhLCB0YUhlaWdodCwgbWlycm9ySGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhLnN0eWxlLmhlaWdodCA9IG1pcnJvckhlaWdodCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzbWFsbCBkZWxheSB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9yY2VBZGp1c3QoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRqdXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBpbml0aWFsaXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGlzdGVuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ29ucHJvcGVydHljaGFuZ2UnIGluIHRhICYmICdvbmlucHV0JyBpbiB0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElFOVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhWydvbmlucHV0J10gPSB0YS5vbmtleXVwID0gYWRqdXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YVsnb25pbnB1dCddID0gYWRqdXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAkd2luLmJpbmQoJ3Jlc2l6ZScsIGZvcmNlQWRqdXN0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmdNb2RlbC4kbW9kZWxWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlQWRqdXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJG9uKCdlbGFzdGljOmFkanVzdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0TWlycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VBZGp1c3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChhZGp1c3QsIDAsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIGRlc3Ryb3lcbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtaXJyb3IucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbi51bmJpbmQoJ3Jlc2l6ZScsIGZvcmNlQWRqdXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5tZXNzYWdlcycsIFsnbW9ub3NwYWNlZC5lbGFzdGljJ10pO1xufSkoKTtcblxuXG5cblxuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcC5wcm9maWxlc1wiLCBbJ2FwcC5hdXRoJ10pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwLnNpZGVtZW51XCIsIFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcC51c2Vyc1wiLCBbJ2FwcC5hdXRoJ10pO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAuYXV0aFwiKVxuXG4gICAgICAgIC5jb250cm9sbGVyKFwiYXV0aENvbnRyb2xsZXJcIiwgYXV0aENvbnRyb2xsZXIpO1xuXG5cbiAgICBmdW5jdGlvbiBhdXRoQ29udHJvbGxlcigkc2NvcGUsIGF1dGhTZXJ2aWNlLCAkaW9uaWNQb3B1cCwgJGlvbmljTG9hZGluZywgJHN0YXRlLCAkdGltZW91dCkge1xuXG4gICAgICAgICRzY29wZS5kYXRhID0ge307XG5cbiAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQkaW9uaWNMb2FkaW5nLnNob3coKTtcblxuXHRcdFx0YXV0aFNlcnZpY2UubG9naW4oJHNjb3BlLmRhdGEudXNlcm5hbWUsICRzY29wZS5kYXRhLnBhc3N3b3JkKS5zdWNjZXNzKGZ1bmN0aW9uKHVzZXIpIHtcblx0XHRcdFx0JGlvbmljTG9hZGluZy5oaWRlKCk7XG5cdFx0XHRcdCRzdGF0ZS5nbygnYXBwLmJ1aWxkaW5ncycpO1xuXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHQkdGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkaW9uaWNMb2FkaW5nLmhpZGUoKTtcblx0XHRcdFx0fSwgMTAwKTtcblxuICAgICAgICAgICAgICAgIHZhciBhbGVydFBvcHVwID0gJGlvbmljUG9wdXAuYWxlcnQoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0xvZ2luIGZhaWxlZCEnLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogZXJyb3IubWVzc2FnZSAvLydQbGVhc2UgY2hlY2sgeW91ciBjcmVkZW50aWFscyEnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cdFx0JHNjb3BlLmZhY2Vib29rTG9naW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBhbGVydFBvcHVwID0gJGlvbmljUG9wdXAuYWxlcnQoe1xuXHRcdFx0XHR0aXRsZTogJ0ZhY2Vib29rIGxvZ2luJyxcblx0XHRcdFx0dGVtcGxhdGU6ICdQbGFubmVkISdcblx0XHRcdH0pO1xuICAgICAgICB9XG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwLmF1dGhcIiwgW10pO1xufSkoKTtcbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAuYnVpbGRpbmdzXCIsIFsnYXBwLmZpcmViYXNlJ10pO1xufSkoKTtcbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5maXJlYmFzZScsIFtdKTtcbn0pKCk7XG5cblxuXG5cblxuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ21vbm9zcGFjZWQuZWxhc3RpYycsIFtdKVxuICAgICAgICAuY29uc3RhbnQoJ21zZEVsYXN0aWNDb25maWcnLCB7XG4gICAgICAgICAgICBhcHBlbmQ6ICcnXG4gICAgICAgIH0pXG4gICAgICAgIC5kaXJlY3RpdmUoJ21zZEVsYXN0aWMnLCBbXG4gICAgICAgICAgICAnJHRpbWVvdXQnLCAnJHdpbmRvdycsICdtc2RFbGFzdGljQ29uZmlnJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkdGltZW91dCwgJHdpbmRvdywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgICAgICAgICAgICAgICAgICByZXN0cmljdDogJ0EsIEMnLFxuICAgICAgICAgICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhY2hlIGEgcmVmZXJlbmNlIHRvIHRoZSBET00gZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhID0gZWxlbWVudFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGEgPSBlbGVtZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbnN1cmUgdGhlIGVsZW1lbnQgaXMgYSB0ZXh0YXJlYSwgYW5kIGJyb3dzZXIgaXMgY2FwYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhLm5vZGVOYW1lICE9PSAnVEVYVEFSRUEnIHx8ICEkd2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGVzZSBwcm9wZXJ0aWVzIGJlZm9yZSBtZWFzdXJpbmcgZGltZW5zaW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRhLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93LXknOiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd29yZC13cmFwJzogJ2JyZWFrLXdvcmQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yY2UgdGV4dCByZWZsb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gdGEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YS52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGEudmFsdWUgPSB0ZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXBwZW5kID0gYXR0cnMubXNkRWxhc3RpYyA/IGF0dHJzLm1zZEVsYXN0aWMucmVwbGFjZSgvXFxcXG4vZywgJ1xcbicpIDogY29uZmlnLmFwcGVuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luID0gYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvckluaXRTdHlsZSA9ICdwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTk5OXB4OyByaWdodDogYXV0bzsgYm90dG9tOiBhdXRvOycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdDogMDsgb3ZlcmZsb3c6IGhpZGRlbjsgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDsnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7IGJveC1zaXppbmc6IGNvbnRlbnQtYm94OycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodDogMCAhaW1wb3J0YW50OyBoZWlnaHQ6IDAgIWltcG9ydGFudDsgcGFkZGluZzogMDsnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dvcmQtd3JhcDogYnJlYWstd29yZDsgYm9yZGVyOiAwOycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1pcnJvciA9IGFuZ3VsYXIuZWxlbWVudCgnPHRleHRhcmVhIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIHRhYmluZGV4PVwiLTFcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0eWxlPVwiJyArIG1pcnJvckluaXRTdHlsZSArICdcIi8+JykuZGF0YSgnZWxhc3RpYycsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvciA9ICRtaXJyb3JbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUodGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2l6ZSA9IHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncmVzaXplJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQm94ID0gdGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJykgPT09ICdib3JkZXItYm94JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy1tb3otYm94LXNpemluZycpID09PSAnYm9yZGVyLWJveCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctd2Via2l0LWJveC1zaXppbmcnKSA9PT0gJ2JvcmRlci1ib3gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveE91dGVyID0gIWJvcmRlckJveCA/IHt3aWR0aDogMCwgaGVpZ2h0OiAwfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXJpZ2h0LXdpZHRoJyksIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1yaWdodCcpLCAxMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpLCAxMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci1sZWZ0LXdpZHRoJyksIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci10b3Atd2lkdGgnKSwgMTApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXRvcCcpLCAxMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctYm90dG9tJyksIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLWJvdHRvbS13aWR0aCcpLCAxMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodFZhbHVlID0gcGFyc2VJbnQodGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdtaW4taGVpZ2h0JyksIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRWYWx1ZSA9IHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JyksIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQgPSBNYXRoLm1heChtaW5IZWlnaHRWYWx1ZSwgaGVpZ2h0VmFsdWUpIC0gYm94T3V0ZXIuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnbWF4LWhlaWdodCcpLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9yZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlTdHlsZSA9IFsnZm9udC1mYW1pbHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9udC1zaXplJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZvbnQtd2VpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZvbnQtc3R5bGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGV0dGVyLXNwYWNpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGluZS1oZWlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGV4dC10cmFuc2Zvcm0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd29yZC1zcGFjaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtaW5kZW50J107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4aXQgaWYgZWxhc3RpYyBhbHJlYWR5IGFwcGxpZWQgKG9yIGlzIHRoZSBtaXJyb3IgZWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdGEuZGF0YSgnZWxhc3RpYycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSByZXR1cm5zIG1heC1oZWlnaHQgb2YgLTEgaWYgbm90IHNldFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0ICYmIG1heEhlaWdodCA+IDAgPyBtYXhIZWlnaHQgOiA5ZTQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFwcGVuZCBtaXJyb3IgdG8gdGhlIERPTVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pcnJvci5wYXJlbnROb2RlICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLmFwcGVuZChtaXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgcmVzaXplIGFuZCBhcHBseSBlbGFzdGljXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGEuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVzaXplJzogKHJlc2l6ZSA9PT0gJ25vbmUnIHx8IHJlc2l6ZSA9PT0gJ3ZlcnRpY2FsJykgPyAnbm9uZScgOiAnaG9yaXpvbnRhbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmRhdGEoJ2VsYXN0aWMnLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIG1ldGhvZHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbml0TWlycm9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtaXJyb3JTdHlsZSA9IG1pcnJvckluaXRTdHlsZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvcmVkID0gdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29weSB0aGUgZXNzZW50aWFsIHN0eWxlcyBmcm9tIHRoZSB0ZXh0YXJlYSB0byB0aGUgbWlycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUodGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChjb3B5U3R5bGUsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9yU3R5bGUgKz0gdmFsICsgJzonICsgdGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHZhbCkgKyAnOyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9yLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBtaXJyb3JTdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhQ29tcHV0ZWRTdHlsZVdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXJyb3JIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaXJyb3JlZCAhPT0gdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdE1pcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFjdGl2ZSBmbGFnIHByZXZlbnRzIGFjdGlvbnMgaW4gZnVuY3Rpb24gZnJvbSBjYWxsaW5nIGFkanVzdCBhZ2FpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9yLnZhbHVlID0gdGEudmFsdWUgKyBhcHBlbmQ7IC8vIG9wdGlvbmFsIHdoaXRlc3BhY2UgdG8gaW1wcm92ZSBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9yLnN0eWxlLm92ZXJmbG93WSA9IHRhLnN0eWxlLm92ZXJmbG93WTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YUhlaWdodCA9IHRhLnN0eWxlLmhlaWdodCA9PT0gJycgPyAnYXV0bycgOiBwYXJzZUludCh0YS5zdHlsZS5oZWlnaHQsIDEwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YUNvbXB1dGVkU3R5bGVXaWR0aCA9IGdldENvbXB1dGVkU3R5bGUodGEpLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIGdldENvbXB1dGVkU3R5bGUgaGFzIHJldHVybmVkIGEgcmVhZGFibGUgJ3VzZWQgdmFsdWUnIHBpeGVsIHdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YUNvbXB1dGVkU3R5bGVXaWR0aC5zdWJzdHIodGFDb21wdXRlZFN0eWxlV2lkdGgubGVuZ3RoIC0gMiwgMikgPT09ICdweCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBtaXJyb3Igd2lkdGggaW4gY2FzZSB0aGUgdGV4dGFyZWEgd2lkdGggaGFzIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gcGFyc2VJbnQodGFDb21wdXRlZFN0eWxlV2lkdGgsIDEwKSAtIGJveE91dGVyLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9yLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9ySGVpZ2h0ID0gbWlycm9yLnNjcm9sbEhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWlycm9ySGVpZ2h0ID4gbWF4SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXJyb3JIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdyA9ICdzY3JvbGwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1pcnJvckhlaWdodCA8IG1pbkhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9ySGVpZ2h0ID0gbWluSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvckhlaWdodCArPSBib3hPdXRlci5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhLnN0eWxlLm92ZXJmbG93WSA9IG92ZXJmbG93IHx8ICdoaWRkZW4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YUhlaWdodCAhPT0gbWlycm9ySGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kZW1pdCgnZWxhc3RpYzpyZXNpemUnLCAkdGEsIHRhSGVpZ2h0LCBtaXJyb3JIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGEuc3R5bGUuaGVpZ2h0ID0gbWlycm9ySGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNtYWxsIGRlbGF5IHRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JjZUFkanVzdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGp1c3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIGluaXRpYWxpc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsaXN0ZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgnb25wcm9wZXJ0eWNoYW5nZScgaW4gdGEgJiYgJ29uaW5wdXQnIGluIHRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUU5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFbJ29uaW5wdXQnXSA9IHRhLm9ua2V5dXAgPSBhZGp1c3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhWydvbmlucHV0J10gPSBhZGp1c3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICR3aW4uYmluZCgncmVzaXplJywgZm9yY2VBZGp1c3QpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZ01vZGVsLiRtb2RlbFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VBZGp1c3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kb24oJ2VsYXN0aWM6YWRqdXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRNaXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZUFkanVzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGFkanVzdCwgMCwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogZGVzdHJveVxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1pcnJvci5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luLnVuYmluZCgncmVzaXplJywgZm9yY2VBZGp1c3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICBdKTtcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLm1lc3NhZ2VzJywgWydtb25vc3BhY2VkLmVsYXN0aWMnXSk7XG59KSgpO1xuXG5cblxuXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAucHJvZmlsZXNcIiwgWydhcHAuYXV0aCddKTtcbn0pKCk7XG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwLnNpZGVtZW51XCIsIFtdKTtcbn0pKCk7XG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwLnVzZXJzXCIsIFsnYXBwLmF1dGgnXSk7XG59KSgpO1xuKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGF1dGhDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkc2NvcGVcIiwgXCJhdXRoU2VydmljZVwiLCBcIiRpb25pY1BvcHVwXCIsIFwiJGlvbmljTG9hZGluZ1wiLCBcIiRzdGF0ZVwiLCBcIiR0aW1lb3V0XCJdO1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwLmF1dGhcIilcblxuICAgICAgICAuY29udHJvbGxlcihcImF1dGhDb250cm9sbGVyXCIsIGF1dGhDb250cm9sbGVyKTtcblxuXG4gICAgZnVuY3Rpb24gYXV0aENvbnRyb2xsZXIoJHNjb3BlLCBhdXRoU2VydmljZSwgJGlvbmljUG9wdXAsICRpb25pY0xvYWRpbmcsICRzdGF0ZSwgJHRpbWVvdXQpIHtcblxuICAgICAgICAkc2NvcGUuZGF0YSA9IHt9O1xuXG4gICAgICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0JGlvbmljTG9hZGluZy5zaG93KCk7XG5cblx0XHRcdGF1dGhTZXJ2aWNlLmxvZ2luKCRzY29wZS5kYXRhLnVzZXJuYW1lLCAkc2NvcGUuZGF0YS5wYXNzd29yZCkuc3VjY2VzcyhmdW5jdGlvbih1c2VyKSB7XG5cdFx0XHRcdCRpb25pY0xvYWRpbmcuaGlkZSgpO1xuXHRcdFx0XHQkc3RhdGUuZ28oJ2FwcC5idWlsZGluZ3MnKTtcblxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0JHRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JGlvbmljTG9hZGluZy5oaWRlKCk7XG5cdFx0XHRcdH0sIDEwMCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgYWxlcnRQb3B1cCA9ICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdMb2dpbiBmYWlsZWQhJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IGVycm9yLm1lc3NhZ2UgLy8nUGxlYXNlIGNoZWNrIHlvdXIgY3JlZGVudGlhbHMhJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuXHRcdCRzY29wZS5mYWNlYm9va0xvZ2luID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgYWxlcnRQb3B1cCA9ICRpb25pY1BvcHVwLmFsZXJ0KHtcblx0XHRcdFx0dGl0bGU6ICdGYWNlYm9vayBsb2dpbicsXG5cdFx0XHRcdHRlbXBsYXRlOiAnUGxhbm5lZCEnXG5cdFx0XHR9KTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG4oZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYXV0aFNlcnZpY2UuJGluamVjdCA9IFtcIiRxXCIsIFwiJHJvb3RTY29wZVwiLCBcImZpcmViYXNlU2VydmljZVwiLCBcInVzZXJcIl07XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAuYXV0aFwiKVxuXG4gICAgICAgIC5zZXJ2aWNlKFwiYXV0aFNlcnZpY2VcIiwgYXV0aFNlcnZpY2UpO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZVVzZXIodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblx0XHR2YXIgYXV0aCA9IGZpcmViYXNlU2VydmljZS5mYi5hdXRoKCk7XG5cblx0XHRyZXR1cm4gYXV0aC5jcmVhdGVVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQoZW1haWwsIHBhc3N3b3JkKTtcblx0fVxuXHRcbiAgICBmdW5jdGlvbiBhdXRoU2VydmljZSgkcSwgJHJvb3RTY29wZSwgZmlyZWJhc2VTZXJ2aWNlLCB1c2VyKSB7XG5cdFx0dmFyIGF1dGggPSBmaXJlYmFzZVNlcnZpY2UuZmIuYXV0aCgpO1xuXHRcdFxuXHRcdCRyb290U2NvcGUuJG9uKCduYW1lLWNoYW5nZWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB1c3IgPSBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXI7XG5cdFx0XHRpZiAodXNyID09IG51bGwpIHJldHVybjtcblx0XHRcdFxuXHRcdFx0ZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ3VzZXJzLycgKyB1c3IudWlkKS5zZXQoe1xuXHRcdFx0XHRuYW1lOiB1c3IuZGlzcGxheU5hbWUsXG5cdFx0XHRcdGVtYWlsOiB1c3IuZW1haWwsXG5cdFx0XHRcdGxhc3RBY3Rpdml0eTogbmV3IERhdGUoKS5nZXRUaW1lKClcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHtcbiAgICAgICAgICAgIGxvZ2luOiBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcblxuXHRcdFx0XHR2YXIgc3VjY2Vzc0hhbmRsZXIgPSBmdW5jdGlvbihpbmZvKSB7XG5cdFx0XHRcdFx0aW5mby5pc05ldyA9IGluZm8uZGlzcGxheU5hbWUgPT0gbnVsbDtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKGluZm8pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0dXNlciA9IGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlcjtcblx0XHRcdFx0XHQkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ25hbWUtY2hhbmdlZCcpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHZhciBlcnJvckhhbmRsZXIgPSBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChlcnJvcik7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0YXV0aC5zaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZCh1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0XHRcdFx0LnRoZW4oc3VjY2Vzc0hhbmRsZXIsIGZ1bmN0aW9uIGVycm9yKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRpZiAoZXJyb3IuY29kZSA9PSBcImF1dGgvdXNlci1ub3QtZm91bmRcIikge1xuXHRcdFx0XHRcdFx0XHRhdXRoLmNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCh1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0XHRcdFx0XHRcdFx0LnRoZW4oc3VjY2Vzc0hhbmRsZXIsIGVycm9ySGFuZGxlcik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyKGVycm9yKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblxuICAgICAgICAgICAgICAgIHByb21pc2Uuc3VjY2VzcyA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UudGhlbihmbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9taXNlLmVycm9yID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKG51bGwsIGZuKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuXHRcdFx0bG9nb3V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGF1dGguc2lnbk91dCgpO1xuXHRcdFx0XHR1c2VyID0gZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyO1xuXHRcdFx0fSxcblxuICAgICAgICAgICAgdXNlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGJ1aWxkaW5nQ2hhbm5lbHNTZXJ2aWNlLiRpbmplY3QgPSBbXCJmaXJlYmFzZVNlcnZpY2VcIl07XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAuYnVpbGRpbmdzJylcbiAgICAgICAgLnNlcnZpY2UoJ2J1aWxkaW5nQ2hhbm5lbHNTZXJ2aWNlJywgYnVpbGRpbmdDaGFubmVsc1NlcnZpY2UpO1xuXG4gICAgZnVuY3Rpb24gYnVpbGRpbmdDaGFubmVsc1NlcnZpY2UoZmlyZWJhc2VTZXJ2aWNlKSB7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldENoYW5uZWxzRnJvbTogZnVuY3Rpb24gKGJ1aWxkaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcmViYXNlU2VydmljZS5mYi5kYXRhYmFzZSgpLnJlZignYnVpbGRpbmdzLycgKyBidWlsZGluZyArIFwiL2NoYW5uZWxzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSkoKTtcblxuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGJ1aWxkaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGlvbmljTG9hZGluZ1wiLCBcIiRzdGF0ZVBhcmFtc1wiLCBcImJ1aWxkaW5nQ2hhbm5lbHNTZXJ2aWNlXCJdO1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwLmJ1aWxkaW5nc1wiKVxuXG4gICAgICAgIC5jb250cm9sbGVyKFwiYnVpbGRpbmdDb250cm9sbGVyXCIsIGJ1aWxkaW5nQ29udHJvbGxlcik7XG5cblxuICAgIGZ1bmN0aW9uIGJ1aWxkaW5nQ29udHJvbGxlcigkc2NvcGUsICRpb25pY0xvYWRpbmcsICRzdGF0ZVBhcmFtcywgYnVpbGRpbmdDaGFubmVsc1NlcnZpY2UpIHtcblxuICAgICAgICB2YXIgcmVmID0gYnVpbGRpbmdDaGFubmVsc1NlcnZpY2UuZ2V0Q2hhbm5lbHNGcm9tKCRzdGF0ZVBhcmFtcy5idWlsZGluZ0lkKTtcblxuICAgICAgICAkaW9uaWNMb2FkaW5nLnNob3coKTtcbiAgICAgICAgcmVmLm9uKFwidmFsdWVcIiwgZnVuY3Rpb24gKHNuYXBzaG90KSB7XG4gICAgICAgICAgICB2YXIgdmFsID0gc25hcHNob3QudmFsKCk7XG5cbiAgICAgICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbm5lbHMgPSBhbmd1bGFyLmV4dGVuZCh2YWwuY29tbW9uLCB2YWwuc2VydmljZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvck9iamVjdCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciByZWFkaW5nOiBcIiArIGVycm9yT2JqZWN0LmNvZGUpO1xuICAgICAgICAgICAgdmFyIGFsZXJ0UG9wdXAgPSAkaW9uaWNQb3B1cC5hbGVydCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdPcHMhJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJ1NvcnJ5ISBBbiBlcnJvciBvY3VycmVkLidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxufSkoKTtcbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYnVpbGRpbmdzQ29udHJvbGxlci4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGlvbmljTG9hZGluZ1wiLCBcImJ1aWxkaW5nc1NlcnZpY2VcIl07XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAuYnVpbGRpbmdzXCIpXG5cbiAgICAgICAgLmNvbnRyb2xsZXIoXCJidWlsZGluZ3NDb250cm9sbGVyXCIsIGJ1aWxkaW5nc0NvbnRyb2xsZXIpO1xuXG5cbiAgICBmdW5jdGlvbiBidWlsZGluZ3NDb250cm9sbGVyKCRzY29wZSwgJGlvbmljTG9hZGluZywgYnVpbGRpbmdzU2VydmljZSkge1xuICAgICAgICB2YXIgcmVmID0gYnVpbGRpbmdzU2VydmljZS5nZXRCdWlsZGluZ3MoKTtcblxuICAgICAgICAkaW9uaWNMb2FkaW5nLnNob3coKTtcbiAgICAgICAgcmVmLm9uKFwidmFsdWVcIiwgZnVuY3Rpb24gKHNuYXBzaG90KSB7XG4gICAgICAgICAgICAkc2NvcGUuYnVpbGRpbmdzID0gc25hcHNob3QudmFsKCk7XG4gICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yIHJlYWRpbmc6IFwiICsgZXJyb3JPYmplY3QuY29kZSk7XG4gICAgICAgICAgICB2YXIgYWxlcnRQb3B1cCA9ICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ09wcyEnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnU29ycnkhIEFuIGVycm9yIG9jdXJyZWQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59KSgpO1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBidWlsZGluZ3NTZXJ2aWNlLiRpbmplY3QgPSBbXCJmaXJlYmFzZVNlcnZpY2VcIl07XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAuYnVpbGRpbmdzJylcbiAgICAgICAgLnNlcnZpY2UoJ2J1aWxkaW5nc1NlcnZpY2UnLCBidWlsZGluZ3NTZXJ2aWNlKTtcblxuICAgIGZ1bmN0aW9uIGJ1aWxkaW5nc1NlcnZpY2UoZmlyZWJhc2VTZXJ2aWNlKSB7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldEJ1aWxkaW5nczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJlYmFzZVNlcnZpY2UuZmIuZGF0YWJhc2UoKS5yZWYoJ2J1aWxkaW5ncycpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmZpcmViYXNlJylcbiAgICAgICAgLnNlcnZpY2UoJ2ZpcmViYXNlU2VydmljZScsIGZpcmViYXNlU2VydmljZSk7XG5cblxuICAgIGZ1bmN0aW9uIGZpcmViYXNlU2VydmljZSgpIHtcbiAgICAgICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgICAgICAgIGFwaUtleTogXCJBSXphU3lCNXE4MUFHR294NGk4LVFMMktPdG5ERGZpMDVpcmdjSEVcIixcbiAgICAgICAgICAgIGF1dGhEb21haW46IFwic29jaWFsc3RyYXRhaWRlYXRlYW0uZmlyZWJhc2VhcHAuY29tXCIsXG4gICAgICAgICAgICBkYXRhYmFzZVVSTDogXCJodHRwczovL3NvY2lhbHN0cmF0YWlkZWF0ZWFtLmZpcmViYXNlaW8uY29tXCIsXG4gICAgICAgICAgICBzdG9yYWdlQnVja2V0OiBcIlwiLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZmIgPSBmaXJlYmFzZS5pbml0aWFsaXplQXBwKGNvbmZpZyk7XG4gICAgfVxufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5tZXNzYWdlcycpXG5cbiAgICAgICAgLmNvbnRyb2xsZXIoJ21lc3NhZ2VzQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJHN0YXRlJyxcbiAgICAgICAgICAgICckc3RhdGVQYXJhbXMnLCAnJGlvbmljQWN0aW9uU2hlZXQnLFxuICAgICAgICAgICAgJyRpb25pY1BvcHVwJywgJyRpb25pY1Njcm9sbERlbGVnYXRlJywgJyR0aW1lb3V0JywgJyRpbnRlcnZhbCcsXG4gICAgICAgICAgICBtZXNzYWdlc0NvbnRyb2xsZXJcbiAgICAgICAgXSlcblxuICAgIGZ1bmN0aW9uIG1lc3NhZ2VzQ29udHJvbGxlcigkc2NvcGUsICRyb290U2NvcGUsICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkaW9uaWNBY3Rpb25TaGVldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljUG9wdXAsICRpb25pY1Njcm9sbERlbGVnYXRlLCAkdGltZW91dCwgJGludGVydmFsKSB7XG5cbiAgICAgICAgLy8gbW9jayBhY3F1aXJpbmcgZGF0YSB2aWEgJHN0YXRlUGFyYW1zXG4gICAgICAgICRzY29wZS50b1VzZXIgPSB7XG4gICAgICAgICAgICBfaWQ6ICc1MzRiOGU1YWFhNWU3YWZjMWIyM2U2OWInLFxuICAgICAgICAgICAgcGljOiAnaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbS9pbWcvZG9jcy92ZW5rbWFuLmpwZycsXG4gICAgICAgICAgICBjaGFubmVsOiAkc3RhdGUucGFyYW1zLmNoYW5uZWxJZFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhpcyBjb3VsZCBiZSBvbiAkcm9vdFNjb3BlIHJhdGhlciB0aGFuIGluICRzdGF0ZVBhcmFtc1xuICAgICAgICAkc2NvcGUudXNlciA9IHtcbiAgICAgICAgICAgIF9pZDogJzUzNGI4ZmIyYWE1ZTdhZmMxYjIzZTY5YycsXG4gICAgICAgICAgICBwaWM6ICdodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tL2ltZy9kb2NzL21jZmx5LmpwZycsXG4gICAgICAgICAgICB1c2VybmFtZTogJ01hcnR5J1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5pbnB1dCA9IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGxvY2FsU3RvcmFnZVsndXNlck1lc3NhZ2UtJyArICRzY29wZS50b1VzZXIuX2lkXSB8fCAnJ1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBtZXNzYWdlQ2hlY2tUaW1lcjtcblxuICAgICAgICB2YXIgdmlld1Njcm9sbCA9ICRpb25pY1Njcm9sbERlbGVnYXRlLiRnZXRCeUhhbmRsZSgndXNlck1lc3NhZ2VTY3JvbGwnKTtcbiAgICAgICAgdmFyIGZvb3RlckJhcjsgLy8gZ2V0cyBzZXQgaW4gJGlvbmljVmlldy5lbnRlclxuICAgICAgICB2YXIgc2Nyb2xsZXI7XG4gICAgICAgIHZhciB0eHRJbnB1dDsgLy8gXl5eXG5cbiAgICAgICAgJHNjb3BlLiRvbignJGlvbmljVmlldy5lbnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2VyTWVzc2FnZXMgJGlvbmljVmlldy5lbnRlcicpO1xuXG4gICAgICAgICAgICBnZXRNZXNzYWdlcygpO1xuXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm9vdGVyQmFyID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKCcjdXNlck1lc3NhZ2VzVmlldyAuYmFyLWZvb3RlcicpO1xuICAgICAgICAgICAgICAgIHNjcm9sbGVyID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKCcjdXNlck1lc3NhZ2VzVmlldyAuc2Nyb2xsLWNvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICB0eHRJbnB1dCA9IGFuZ3VsYXIuZWxlbWVudChmb290ZXJCYXIucXVlcnlTZWxlY3RvcigndGV4dGFyZWEnKSk7XG4gICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICAgICAgbWVzc2FnZUNoZWNrVGltZXIgPSAkaW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIGhlcmUgeW91IGNvdWxkIGNoZWNrIGZvciBuZXcgbWVzc2FnZXMgaWYgeW91ciBhcHAgZG9lc24ndCB1c2UgcHVzaCBub3RpZmljYXRpb25zIG9yIHVzZXIgZGlzYWJsZWQgdGhlbVxuICAgICAgICAgICAgfSwgMjAwMDApO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckaW9uaWNWaWV3LmxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2xlYXZpbmcgVXNlck1lc3NhZ2VzIHZpZXcsIGRlc3Ryb3lpbmcgaW50ZXJ2YWwnKTtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBpbnRlcnZhbCBpcyBkZXN0cm95ZWRcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChtZXNzYWdlQ2hlY2tUaW1lcikpIHtcbiAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKG1lc3NhZ2VDaGVja1RpbWVyKTtcbiAgICAgICAgICAgICAgICBtZXNzYWdlQ2hlY2tUaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJGlvbmljVmlldy5iZWZvcmVMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghJHNjb3BlLmlucHV0Lm1lc3NhZ2UgfHwgJHNjb3BlLmlucHV0Lm1lc3NhZ2UgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXJNZXNzYWdlLScgKyAkc2NvcGUudG9Vc2VyLl9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldE1lc3NhZ2VzKCkge1xuICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2VzID0gW3tcbiAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIjUzNWQ2MjVmODk4ZGY0ZTgwZTJhMTI1ZVwiLFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIklvbmljIGhhcyBjaGFuZ2VkIHRoZSBnYW1lIGZvciBoeWJyaWQgYXBwIGRldmVsb3BtZW50LlwiLFxuICAgICAgICAgICAgICAgIFwidXNlcklkXCI6IFwiNTM0YjhmYjJhYTVlN2FmYzFiMjNlNjljXCIsXG4gICAgICAgICAgICAgICAgXCJkYXRlXCI6IFwiMjAxNC0wNC0yN1QyMDowMjozOS4wODJaXCIsXG4gICAgICAgICAgICAgICAgXCJyZWFkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJyZWFkRGF0ZVwiOiBcIjIwMTQtMTItMDFUMDY6Mjc6MzcuOTQ0WlwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJfaWRcIjogXCI1MzVmMTNmZmVlM2IyYTY4MTEyYjlmYzBcIixcbiAgICAgICAgICAgICAgICBcInRleHRcIjogXCJJIGxpa2UgSW9uaWMgYmV0dGVyIHRoYW4gaWNlIGNyZWFtIVwiLFxuICAgICAgICAgICAgICAgIFwidXNlcklkXCI6IFwiNTM0YjhlNWFhYTVlN2FmYzFiMjNlNjliXCIsXG4gICAgICAgICAgICAgICAgXCJkYXRlXCI6IFwiMjAxNC0wNC0yOVQwMjo1Mjo0Ny43MDZaXCIsXG4gICAgICAgICAgICAgICAgXCJyZWFkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJyZWFkRGF0ZVwiOiBcIjIwMTQtMTItMDFUMDY6Mjc6MzcuOTQ0WlwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJfaWRcIjogXCI1NDZhNTg0M2ZkNGM1ZDU4MWVmYTI2M2FcIixcbiAgICAgICAgICAgICAgICBcInRleHRcIjogXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQsIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnQgbW9sbGl0IGFuaW0gaWQgZXN0IGxhYm9ydW0uXCIsXG4gICAgICAgICAgICAgICAgXCJ1c2VySWRcIjogXCI1MzRiOGZiMmFhNWU3YWZjMWIyM2U2OWNcIixcbiAgICAgICAgICAgICAgICBcImRhdGVcIjogXCIyMDE0LTExLTE3VDIwOjE5OjE1LjI4OVpcIixcbiAgICAgICAgICAgICAgICBcInJlYWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlYWREYXRlXCI6IFwiMjAxNC0xMi0wMVQwNjoyNzozOC4zMjhaXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIjU0NzY0Mzk5YWI0M2QxZDQxMTNhYmZkMVwiLFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIkFtIEkgZHJlYW1pbmc/XCIsXG4gICAgICAgICAgICAgICAgXCJ1c2VySWRcIjogXCI1MzRiOGU1YWFhNWU3YWZjMWIyM2U2OWJcIixcbiAgICAgICAgICAgICAgICBcImRhdGVcIjogXCIyMDE0LTExLTI2VDIxOjE4OjE3LjU5MVpcIixcbiAgICAgICAgICAgICAgICBcInJlYWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlYWREYXRlXCI6IFwiMjAxNC0xMi0wMVQwNjoyNzozOC4zMzdaXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIjU0NzY0M2FlYWI0M2QxZDQxMTNhYmZkMlwiLFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIklzIHRoaXMgbWFnaWM/XCIsXG4gICAgICAgICAgICAgICAgXCJ1c2VySWRcIjogXCI1MzRiOGZiMmFhNWU3YWZjMWIyM2U2OWNcIixcbiAgICAgICAgICAgICAgICBcImRhdGVcIjogXCIyMDE0LTExLTI2VDIxOjE4OjM4LjU0OVpcIixcbiAgICAgICAgICAgICAgICBcInJlYWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlYWREYXRlXCI6IFwiMjAxNC0xMi0wMVQwNjoyNzozOC4zMzhaXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIjU0NzgxNWRiYWI0M2QxZDQxMTNhYmZlZlwiLFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIkdlZSB3aXosIHRoaXMgaXMgc29tZXRoaW5nIHNwZWNpYWwuXCIsXG4gICAgICAgICAgICAgICAgXCJ1c2VySWRcIjogXCI1MzRiOGU1YWFhNWU3YWZjMWIyM2U2OWJcIixcbiAgICAgICAgICAgICAgICBcImRhdGVcIjogXCIyMDE0LTExLTI4VDA2OjI3OjQwLjAwMVpcIixcbiAgICAgICAgICAgICAgICBcInJlYWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlYWREYXRlXCI6IFwiMjAxNC0xMi0wMVQwNjoyNzozOC4zMzhaXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIjU0NzgxYzY5YWI0M2QxZDQxMTNhYmZmMFwiLFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIkkgdGhpbmsgSSBsaWtlIElvbmljIG1vcmUgdGhhbiBJIGxpa2UgaWNlIGNyZWFtIVwiLFxuICAgICAgICAgICAgICAgIFwidXNlcklkXCI6IFwiNTM0YjhmYjJhYTVlN2FmYzFiMjNlNjljXCIsXG4gICAgICAgICAgICAgICAgXCJkYXRlXCI6IFwiMjAxNC0xMS0yOFQwNjo1NTozNy4zNTBaXCIsXG4gICAgICAgICAgICAgICAgXCJyZWFkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJyZWFkRGF0ZVwiOiBcIjIwMTQtMTItMDFUMDY6Mjc6MzguMzM4WlwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJfaWRcIjogXCI1NDc4MWNhNGFiNDNkMWQ0MTEzYWJmZjFcIixcbiAgICAgICAgICAgICAgICBcInRleHRcIjogXCJZZWEsIGl0J3MgcHJldHR5IHN3ZWV0XCIsXG4gICAgICAgICAgICAgICAgXCJ1c2VySWRcIjogXCI1MzRiOGU1YWFhNWU3YWZjMWIyM2U2OWJcIixcbiAgICAgICAgICAgICAgICBcImRhdGVcIjogXCIyMDE0LTExLTI4VDA2OjU2OjM2LjQ3MlpcIixcbiAgICAgICAgICAgICAgICBcInJlYWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlYWREYXRlXCI6IFwiMjAxNC0xMi0wMVQwNjoyNzozOC4zMzhaXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIjU0NzhkZjg2YWI0M2QxZDQxMTNhYmZmNFwiLFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIldvdywgdGhpcyBpcyByZWFsbHkgc29tZXRoaW5nIGh1aD9cIixcbiAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBcIjUzNGI4ZmIyYWE1ZTdhZmMxYjIzZTY5Y1wiLFxuICAgICAgICAgICAgICAgIFwiZGF0ZVwiOiBcIjIwMTQtMTEtMjhUMjA6NDg6MDYuNTcyWlwiLFxuICAgICAgICAgICAgICAgIFwicmVhZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVhZERhdGVcIjogXCIyMDE0LTEyLTAxVDA2OjI3OjM4LjMzOVpcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiX2lkXCI6IFwiNTQ3ODFjYTRhYjQzZDFkNDExM2FiZmYxXCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiQ3JlYXRlIGFtYXppbmcgYXBwcyAtIGlvbmljZnJhbWV3b3JrLmNvbVwiLFxuICAgICAgICAgICAgICAgIFwidXNlcklkXCI6IFwiNTM0YjhlNWFhYTVlN2FmYzFiMjNlNjliXCIsXG4gICAgICAgICAgICAgICAgXCJkYXRlXCI6IFwiMjAxNC0xMS0yOVQwNjo1NjozNi40NzJaXCIsXG4gICAgICAgICAgICAgICAgXCJyZWFkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJyZWFkRGF0ZVwiOiBcIjIwMTQtMTItMDFUMDY6Mjc6MzguMzM4WlwiXG4gICAgICAgICAgICB9XTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2lucHV0Lm1lc3NhZ2UnLCBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnaW5wdXQubWVzc2FnZSAkd2F0Y2gsIG5ld1ZhbHVlICcgKyBuZXdWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoIW5ld1ZhbHVlKSBuZXdWYWx1ZSA9ICcnO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlWyd1c2VyTWVzc2FnZS0nICsgJHNjb3BlLnRvVXNlci5faWRdID0gbmV3VmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uIChzZW5kTWVzc2FnZUZvcm0pIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIHRvSWQ6ICRzY29wZS50b1VzZXIuX2lkLFxuICAgICAgICAgICAgICAgIHRleHQ6ICRzY29wZS5pbnB1dC5tZXNzYWdlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBpZiB5b3UgZG8gYSB3ZWIgc2VydmljZSBjYWxsIHRoaXMgd2lsbCBiZSBuZWVkZWQgYXMgd2VsbCBhcyBiZWZvcmUgdGhlIHZpZXdTY3JvbGwgY2FsbHNcbiAgICAgICAgICAgIC8vIHlvdSBjYW4ndCBzZWUgdGhlIGVmZmVjdCBvZiB0aGlzIGluIHRoZSBicm93c2VyIGl0IG5lZWRzIHRvIGJlIHVzZWQgb24gYSByZWFsIGRldmljZVxuICAgICAgICAgICAgLy8gZm9yIHNvbWUgcmVhc29uIHRoZSBvbmUgdGltZSBibHVyIGV2ZW50IGlzIG5vdCBmaXJpbmcgaW4gdGhlIGJyb3dzZXIgYnV0IGRvZXMgb24gZGV2aWNlc1xuICAgICAgICAgICAga2VlcEtleWJvYXJkT3BlbigpO1xuXG4gICAgICAgICAgICAvL01vY2tTZXJ2aWNlLnNlbmRNZXNzYWdlKG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgJHNjb3BlLmlucHV0Lm1lc3NhZ2UgPSAnJztcblxuICAgICAgICAgICAgbWVzc2FnZS5faWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgLy8gOn4pXG4gICAgICAgICAgICBtZXNzYWdlLmRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgbWVzc2FnZS51c2VybmFtZSA9ICRzY29wZS51c2VyLnVzZXJuYW1lO1xuICAgICAgICAgICAgbWVzc2FnZS51c2VySWQgPSAkc2NvcGUudXNlci5faWQ7XG4gICAgICAgICAgICBtZXNzYWdlLnBpYyA9ICRzY29wZS51c2VyLnBpY3R1cmU7XG5cbiAgICAgICAgICAgICRzY29wZS5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAga2VlcEtleWJvYXJkT3BlbigpO1xuICAgICAgICAgICAgICAgIHZpZXdTY3JvbGwuc2Nyb2xsQm90dG9tKHRydWUpO1xuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZXMucHVzaChNb2NrU2VydmljZS5nZXRNb2NrTWVzc2FnZSgpKTtcbiAgICAgICAgICAgICAgICBrZWVwS2V5Ym9hcmRPcGVuKCk7XG4gICAgICAgICAgICAgICAgdmlld1Njcm9sbC5zY3JvbGxCb3R0b20odHJ1ZSk7XG4gICAgICAgICAgICB9LCAyMDAwKTtcblxuICAgICAgICAgICAgLy99KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB0aGlzIGtlZXBzIHRoZSBrZXlib2FyZCBvcGVuIG9uIGEgZGV2aWNlIG9ubHkgYWZ0ZXIgc2VuZGluZyBhIG1lc3NhZ2UsIGl0IGlzIG5vbiBvYnRydXNpdmVcbiAgICAgICAgZnVuY3Rpb24ga2VlcEtleWJvYXJkT3BlbigpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdrZWVwS2V5Ym9hcmRPcGVuJyk7XG4gICAgICAgICAgICB0eHRJbnB1dC5vbmUoJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RleHRhcmVhIGJsdXIsIGZvY3VzIGJhY2sgb24gaXQnKTtcbiAgICAgICAgICAgICAgICB0eHRJbnB1dFswXS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvblByb2ZpbGVQaWNFcnJvcihlbGUpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlLnNyYyA9ICcnOyAvLyBzZXQgYSBmYWxsYmFja1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLm9uTWVzc2FnZUhvbGQgPSBmdW5jdGlvbiAoZSwgaXRlbUluZGV4LCBtZXNzYWdlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnb25NZXNzYWdlSG9sZCcpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ21lc3NhZ2U6ICcgKyBKU09OLnN0cmluZ2lmeShtZXNzYWdlLCBudWxsLCAyKSk7XG4gICAgICAgICAgICAkaW9uaWNBY3Rpb25TaGVldC5zaG93KHtcbiAgICAgICAgICAgICAgICBidXR0b25zOiBbe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnQ29weSBUZXh0J1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0RlbGV0ZSBNZXNzYWdlJ1xuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIGJ1dHRvbkNsaWNrZWQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IC8vIENvcHkgVGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29yZG92YS5wbHVnaW5zLmNsaXBib2FyZC5jb3B5KG1lc3NhZ2UudGV4dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTogLy8gRGVsZXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm8gc2VydmVyIHNpZGUgc2VjcmV0cyBoZXJlIDp+KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlcy5zcGxpY2UoaXRlbUluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdTY3JvbGwucmVzaXplKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHRoaXMgcHJvYiBzZWVtcyB3ZWlyZCBoZXJlIGJ1dCBJIGhhdmUgcmVhc29ucyBmb3IgdGhpcyBpbiBteSBhcHAsIHNlY3JldCFcbiAgICAgICAgJHNjb3BlLnZpZXdQcm9maWxlID0gZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgaWYgKG1zZy51c2VySWQgPT09ICRzY29wZS51c2VyLl9pZCkge1xuICAgICAgICAgICAgICAgIC8vIGdvIHRvIHlvdXIgcHJvZmlsZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBnbyB0byBvdGhlciB1c2VycyBwcm9maWxlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSSBlbWl0IHRoaXMgZXZlbnQgZnJvbSB0aGUgbW9ub3NwYWNlZC5lbGFzdGljIGRpcmVjdGl2ZSwgcmVhZCBsaW5lIDQ4MFxuICAgICAgICAkc2NvcGUuJG9uKCd0YVJlc2l6ZScsIGZ1bmN0aW9uIChlLCB0YSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3RhUmVzaXplJyk7XG4gICAgICAgICAgICBpZiAoIXRhKSByZXR1cm47XG5cbiAgICAgICAgICAgIHZhciB0YUhlaWdodCA9IHRhWzBdLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0YUhlaWdodDogJyArIHRhSGVpZ2h0KTtcblxuICAgICAgICAgICAgaWYgKCFmb290ZXJCYXIpIHJldHVybjtcblxuICAgICAgICAgICAgdmFyIG5ld0Zvb3RlckhlaWdodCA9IHRhSGVpZ2h0ICsgMTA7XG4gICAgICAgICAgICBuZXdGb290ZXJIZWlnaHQgPSAobmV3Rm9vdGVySGVpZ2h0ID4gNDQpID8gbmV3Rm9vdGVySGVpZ2h0IDogNDQ7XG5cbiAgICAgICAgICAgIGZvb3RlckJhci5zdHlsZS5oZWlnaHQgPSBuZXdGb290ZXJIZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgc2Nyb2xsZXIuc3R5bGUuYm90dG9tID0gbmV3Rm9vdGVySGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgfSk7XG5cbiAgICB9XG59KSgpO1xuXG5cblxuXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAubWVzc2FnZXMnKVxuXG4gICAgICAgIC5maWx0ZXIoJ25sMmJyJywgWyckZmlsdGVyJywgbmwyYnJdKVxuXG4gICAgZnVuY3Rpb24gbmwyYnIoJGZpbHRlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5yZXBsYWNlKC9cXG5cXHI/L2csICc8YnIgLz4nKTtcbiAgICAgICAgfTtcbiAgICB9XG59KSgpO1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBtZXNzYWdlc1NlcnZpY2UuJGluamVjdCA9IFtcImZpcmViYXNlU2VydmljZVwiXTtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5tZXNzYWdlcycpXG4gICAgICAgIC5zZXJ2aWNlKCdtZXNzYWdlc1NlcnZpY2UnLCBtZXNzYWdlc1NlcnZpY2UpO1xuXG4gICAgZnVuY3Rpb24gbWVzc2FnZXNTZXJ2aWNlKGZpcmViYXNlU2VydmljZSkge1xuICAgICAgICB2YXIgc2VydmljZSA9IHt9O1xuXG4gICAgICAgIHNlcnZpY2UuZ2V0TWVzc2FnZXNSZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ21lc3NhZ2VzJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VydmljZS5hZGRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmaXJlYmFzZVNlcnZpY2UuZmIuZGF0YWJhc2UoKS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfVxufSkoKTtcblxuKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHByb2ZpbGVDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkc2NvcGVcIiwgXCIkaW9uaWNMb2FkaW5nXCIsIFwiJGlvbmljUG9wdXBcIiwgXCJhdXRoU2VydmljZVwiLCBcInByb2ZpbGVzU2VydmljZVwiXTtcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcC5wcm9maWxlc1wiKVxuXG4gICAgICAgIC5jb250cm9sbGVyKFwicHJvZmlsZUNvbnRyb2xsZXJcIiwgcHJvZmlsZUNvbnRyb2xsZXIpO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9maWxlQ29udHJvbGxlcigkc2NvcGUsICRpb25pY0xvYWRpbmcsICRpb25pY1BvcHVwLCBhdXRoU2VydmljZSwgcHJvZmlsZXNTZXJ2aWNlKSB7XG5cblx0XHR2YXIgdXNlciA9IGF1dGhTZXJ2aWNlLnVzZXIoKTtcblx0XHRcblx0XHQkc2NvcGUuZGF0YSA9IHtcblx0XHRcdGRpc3BsYXlOYW1lIDogdXNlciA/IHVzZXIuZGlzcGxheU5hbWUgOiBcIlwiLFxuXHRcdFx0ZW1haWwgOiB1c2VyID8gdXNlci5lbWFpbCA6IFwiXCJcblx0XHR9O1xuXG4gICAgICAgICRzY29wZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdCRpb25pY0xvYWRpbmcuc2hvdygpO1xuXG4gICAgICAgICAgICBwcm9maWxlc1NlcnZpY2UudXBkYXRlUHJvZmlsZSgkc2NvcGUuZGF0YSkudGhlbihmdW5jdGlvbiBzdWNjZXNzKG1zZykge1xuXHRcdFx0XHQkaW9uaWNMb2FkaW5nLmhpZGUoKTtcblxuXHRcdFx0XHQkaW9uaWNQb3B1cC5hbGVydCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUHJvZmlsZVVwZGF0ZSEnLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogbXNnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yKSB7XG5cdFx0XHRcdCRpb25pY0xvYWRpbmcuaGlkZSgpO1xuXG5cdFx0XHRcdCRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdVcGRhdGUgZmFpbGVkIScsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG4oZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgcHJvZmlsZXNTZXJ2aWNlLiRpbmplY3QgPSBbXCIkcVwiLCBcIiRyb290U2NvcGVcIiwgXCJhdXRoU2VydmljZVwiLCBcInVzZXJcIl07XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAucHJvZmlsZXNcIilcblxuICAgICAgICAuc2VydmljZShcInByb2ZpbGVzU2VydmljZVwiLCBwcm9maWxlc1NlcnZpY2UpO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9maWxlc1NlcnZpY2UoJHEsICRyb290U2NvcGUsIGF1dGhTZXJ2aWNlLCB1c2VyKSB7XG5cdFx0XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1cGRhdGVQcm9maWxlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIGF1dGhTZXJ2aWNlLnVzZXIoKS51cGRhdGVQcm9maWxlKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3MoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKFwiUHJvZmlsZSB1cGRhdGVkIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIgPSBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ25hbWUtY2hhbmdlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICB9XG59KSgpO1xuKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHNpZGVtZW51Q29udHJvbGxlci4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiYXV0aFNlcnZpY2VcIiwgXCJtZXNzYWdlc1NlcnZpY2VcIl07XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAuc2lkZW1lbnVcIilcblxuICAgICAgICAuY29udHJvbGxlcihcInNpZGVtZW51Q29udHJvbGxlclwiLCBzaWRlbWVudUNvbnRyb2xsZXIpO1xuXG5cbiAgICBmdW5jdGlvbiBzaWRlbWVudUNvbnRyb2xsZXIoJHNjb3BlLCBhdXRoU2VydmljZSwgbWVzc2FnZXNTZXJ2aWNlKSB7XG5cdFx0JHNjb3BlLiRvbignbmFtZS1jaGFuZ2VkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHQkc2NvcGUuZGlzcGxheU5hbWUgPSBhdXRoU2VydmljZS51c2VyKCkuZGlzcGxheU5hbWU7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dmFyIHVzZXIgPSBhdXRoU2VydmljZS51c2VyKCk7XG5cdFx0JHNjb3BlLmRpc3BsYXlOYW1lID0gdXNlciA/IHVzZXIuZGlzcGxheU5hbWUgOiBcIkVkaXQgTmFtZVwiO1xuICAgIH1cbn0pKCk7XG5cbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB1c2Vyc1NlcnZpY2UuJGluamVjdCA9IFtcIiRxXCIsIFwiYXV0aFNlcnZpY2VcIl07XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAudXNlcnNcIilcblxuICAgICAgICAuc2VydmljZShcInVzZXJzU2VydmljZVwiLCB1c2Vyc1NlcnZpY2UpO1xuXG5cbiAgICBmdW5jdGlvbiB1c2Vyc1NlcnZpY2UoJHEsIGF1dGhTZXJ2aWNlKSB7XG5cdCAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXBkYXRlUHJvZmlsZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICBhdXRoU2VydmljZS51c2VyKCkudXBkYXRlUHJvZmlsZShkYXRhKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShcIlByb2ZpbGUgdXBkYXRlZCFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyID0gZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCduYW1lLWNoYW5nZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfVxufSkoKTtcbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcsIFtcbiAgICAgICAgICAgICdpb25pYycsXG4gICAgICAgICAgICAnbW9ub3NwYWNlZC5lbGFzdGljJyxcblxuICAgICAgICAgICAgJ2FwcC5maXJlYmFzZScsXG4gICAgICAgICAgICAnYXBwLmF1dGgnLFxuICAgICAgICAgICAgJ2FwcC5zaWRlbWVudScsXG4gICAgICAgICAgICAnYXBwLmJ1aWxkaW5ncycsXG4gICAgICAgICAgICAnYXBwLnByb2ZpbGVzJyxcbiAgICAgICAgICAgICdhcHAubWVzc2FnZXMnXG4gICAgICAgIF0pXG5cbiAgICAgICAgLnZhbHVlKFwidXNlclwiLCBudWxsKVxuXG4gICAgICAgIC5ydW4oW1wiJGlvbmljUGxhdGZvcm1cIiwgXCIkdGltZW91dFwiLCBcIiRyb290U2NvcGVcIiwgZnVuY3Rpb24gKCRpb25pY1BsYXRmb3JtLCAkdGltZW91dCwgJHJvb3RTY29wZSkge1xuICAgICAgICAgICAgJGlvbmljUGxhdGZvcm0ucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuY29yZG92YSAmJiB3aW5kb3cuY29yZG92YS5wbHVnaW5zLktleWJvYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcmRvdmEucGx1Z2lucy5LZXlib2FyZC5oaWRlS2V5Ym9hcmRBY2Nlc3NvcnlCYXIodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29yZG92YS5wbHVnaW5zLktleWJvYXJkLmRpc2FibGVTY3JvbGwodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuU3RhdHVzQmFyKSB7XG4gICAgICAgICAgICAgICAgICAgIFN0YXR1c0Jhci5zdHlsZURlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ25hbWUtY2hhbmdlZCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKTtcbn0pKCk7XG5cblxuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcblxuICAgICAgICAubW9kdWxlKCdhcHAnKVxuXG4gICAgICAgIC5ydW4oWyckcm9vdFNjb3BlJywgJyRsb2NhdGlvbicsICdhdXRoU2VydmljZScsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkc3RhdGUsIGF1dGhTZXJ2aWNlKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgICAgIGlmIChhdXRoU2VydmljZS51c2VyKCkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2xvZ2luJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKVxufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG5cbiAgICAgICAgLm1vZHVsZSgnYXBwJylcblxuICAgICAgICAuY29uZmlnKFtcIiRzdGF0ZVByb3ZpZGVyXCIsIFwiJHVybFJvdXRlclByb3ZpZGVyXCIsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG5cbiAgICAgICAgICAgICRzdGF0ZVByb3ZpZGVyXG5cbiAgICAgICAgICAgICAgICAuc3RhdGUoJ2FwcCcsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2FwcCcsXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc2lkZW1lbnUuaHRtbCcsXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnYXBwLmJ1aWxkaW5ncycsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2J1aWxkaW5ncycsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWVudUNvbnRlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9idWlsZGluZ3MuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAuc3RhdGUoJ2FwcC5idWlsZGluZycsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2J1aWxkaW5ncy86YnVpbGRpbmdJZCcsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWVudUNvbnRlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9idWlsZGluZy5odG1sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnYXBwLmNoYW5uZWwnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9idWlsZGluZ3MvOmJ1aWxkaW5nSWQvOmNoYW5uZWxJZCcsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWVudUNvbnRlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9tZXNzYWdlcy9jaGF0Lmh0bWwnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdhcHAucHJvZmlsZScsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL3Byb2ZpbGUnLFxuICAgICAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWVudUNvbnRlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wcm9maWxlL3Byb2ZpbGUuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAuc3RhdGUoJ2FwcC5sb2dvdXQnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvbG9naW5cIixcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVQcm92aWRlcjogW1wiYXV0aFNlcnZpY2VcIiwgXCIkc3RhdGVcIiwgZnVuY3Rpb24gKGF1dGhTZXJ2aWNlLCAkc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdsb2dpbicpO1xuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdsb2dpbicsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9sb2dpblwiLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJ2aWV3cy9hdXRoL2xvZ2luLmh0bWxcIlxuICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIC8vZmFsbGJhY2tcbiAgICAgICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9sb2dpbicpO1xuXG4gICAgICAgIH1dKTtcbn0pKCk7XG5cblxuXG5cbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcC5hdXRoXCIpXG5cbiAgICAgICAgLnNlcnZpY2UoXCJhdXRoU2VydmljZVwiLCBhdXRoU2VydmljZSk7XG5cblx0ZnVuY3Rpb24gY3JlYXRlVXNlcih1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHR2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXHRcdHZhciBhdXRoID0gZmlyZWJhc2VTZXJ2aWNlLmZiLmF1dGgoKTtcblxuXHRcdHJldHVybiBhdXRoLmNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZChlbWFpbCwgcGFzc3dvcmQpO1xuXHR9XG5cdFxuICAgIGZ1bmN0aW9uIGF1dGhTZXJ2aWNlKCRxLCAkcm9vdFNjb3BlLCBmaXJlYmFzZVNlcnZpY2UsIHVzZXIpIHtcblx0XHR2YXIgYXV0aCA9IGZpcmViYXNlU2VydmljZS5mYi5hdXRoKCk7XG5cdFx0XG5cdFx0JHJvb3RTY29wZS4kb24oJ25hbWUtY2hhbmdlZCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHVzciA9IGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlcjtcblx0XHRcdGlmICh1c3IgPT0gbnVsbCkgcmV0dXJuO1xuXHRcdFx0XG5cdFx0XHRmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigndXNlcnMvJyArIHVzci51aWQpLnNldCh7XG5cdFx0XHRcdG5hbWU6IHVzci5kaXNwbGF5TmFtZSxcblx0XHRcdFx0ZW1haWw6IHVzci5lbWFpbCxcblx0XHRcdFx0bGFzdEFjdGl2aXR5OiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4ge1xuICAgICAgICAgICAgbG9naW46IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuXG5cdFx0XHRcdHZhciBzdWNjZXNzSGFuZGxlciA9IGZ1bmN0aW9uKGluZm8pIHtcblx0XHRcdFx0XHRpbmZvLmlzTmV3ID0gaW5mby5kaXNwbGF5TmFtZSA9PSBudWxsO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUoaW5mbyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHR1c2VyID0gZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyO1xuXHRcdFx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgnbmFtZS1jaGFuZ2VkJyk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dmFyIGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRhdXRoLnNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkKHVzZXJuYW1lLCBwYXNzd29yZClcblx0XHRcdFx0XHQudGhlbihzdWNjZXNzSGFuZGxlciwgZnVuY3Rpb24gZXJyb3IoZXJyb3IpIHtcblx0XHRcdFx0XHRcdGlmIChlcnJvci5jb2RlID09IFwiYXV0aC91c2VyLW5vdC1mb3VuZFwiKSB7XG5cdFx0XHRcdFx0XHRcdGF1dGguY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKHVzZXJuYW1lLCBwYXNzd29yZClcblx0XHRcdFx0XHRcdFx0XHQudGhlbihzdWNjZXNzSGFuZGxlciwgZXJyb3JIYW5kbGVyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXIoZXJyb3IpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG4gICAgICAgICAgICAgICAgcHJvbWlzZS5zdWNjZXNzID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZuKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb21pc2UuZXJyb3IgPSBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4obnVsbCwgZm4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG5cdFx0XHRsb2dvdXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0YXV0aC5zaWduT3V0KCk7XG5cdFx0XHRcdHVzZXIgPSBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXI7XG5cdFx0XHR9LFxuXG4gICAgICAgICAgICB1c2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmJ1aWxkaW5ncycpXG4gICAgICAgIC5zZXJ2aWNlKCdidWlsZGluZ0NoYW5uZWxzU2VydmljZScsIGJ1aWxkaW5nQ2hhbm5lbHNTZXJ2aWNlKTtcblxuICAgIGZ1bmN0aW9uIGJ1aWxkaW5nQ2hhbm5lbHNTZXJ2aWNlKGZpcmViYXNlU2VydmljZSkge1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRDaGFubmVsc0Zyb206IGZ1bmN0aW9uIChidWlsZGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJlYmFzZVNlcnZpY2UuZmIuZGF0YWJhc2UoKS5yZWYoJ2J1aWxkaW5ncy8nICsgYnVpbGRpbmcgKyBcIi9jaGFubmVsc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG5cbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAuYnVpbGRpbmdzXCIpXG5cbiAgICAgICAgLmNvbnRyb2xsZXIoXCJidWlsZGluZ0NvbnRyb2xsZXJcIiwgYnVpbGRpbmdDb250cm9sbGVyKTtcblxuXG4gICAgZnVuY3Rpb24gYnVpbGRpbmdDb250cm9sbGVyKCRzY29wZSwgJGlvbmljTG9hZGluZywgJHN0YXRlUGFyYW1zLCBidWlsZGluZ0NoYW5uZWxzU2VydmljZSkge1xuXG4gICAgICAgIHZhciByZWYgPSBidWlsZGluZ0NoYW5uZWxzU2VydmljZS5nZXRDaGFubmVsc0Zyb20oJHN0YXRlUGFyYW1zLmJ1aWxkaW5nSWQpO1xuXG4gICAgICAgICRpb25pY0xvYWRpbmcuc2hvdygpO1xuICAgICAgICByZWYub24oXCJ2YWx1ZVwiLCBmdW5jdGlvbiAoc25hcHNob3QpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSBzbmFwc2hvdC52YWwoKTtcblxuICAgICAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5jaGFubmVscyA9IGFuZ3VsYXIuZXh0ZW5kKHZhbC5jb21tb24sIHZhbC5zZXJ2aWNlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG5cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yIHJlYWRpbmc6IFwiICsgZXJyb3JPYmplY3QuY29kZSk7XG4gICAgICAgICAgICB2YXIgYWxlcnRQb3B1cCA9ICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ09wcyEnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnU29ycnkhIEFuIGVycm9yIG9jdXJyZWQuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAuYnVpbGRpbmdzXCIpXG5cbiAgICAgICAgLmNvbnRyb2xsZXIoXCJidWlsZGluZ3NDb250cm9sbGVyXCIsIGJ1aWxkaW5nc0NvbnRyb2xsZXIpO1xuXG5cbiAgICBmdW5jdGlvbiBidWlsZGluZ3NDb250cm9sbGVyKCRzY29wZSwgJGlvbmljTG9hZGluZywgYnVpbGRpbmdzU2VydmljZSkge1xuICAgICAgICB2YXIgcmVmID0gYnVpbGRpbmdzU2VydmljZS5nZXRCdWlsZGluZ3MoKTtcblxuICAgICAgICAkaW9uaWNMb2FkaW5nLnNob3coKTtcbiAgICAgICAgcmVmLm9uKFwidmFsdWVcIiwgZnVuY3Rpb24gKHNuYXBzaG90KSB7XG4gICAgICAgICAgICAkc2NvcGUuYnVpbGRpbmdzID0gc25hcHNob3QudmFsKCk7XG4gICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yIHJlYWRpbmc6IFwiICsgZXJyb3JPYmplY3QuY29kZSk7XG4gICAgICAgICAgICB2YXIgYWxlcnRQb3B1cCA9ICRpb25pY1BvcHVwLmFsZXJ0KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ09wcyEnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnU29ycnkhIEFuIGVycm9yIG9jdXJyZWQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAuYnVpbGRpbmdzJylcbiAgICAgICAgLnNlcnZpY2UoJ2J1aWxkaW5nc1NlcnZpY2UnLCBidWlsZGluZ3NTZXJ2aWNlKTtcblxuICAgIGZ1bmN0aW9uIGJ1aWxkaW5nc1NlcnZpY2UoZmlyZWJhc2VTZXJ2aWNlKSB7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldEJ1aWxkaW5nczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJlYmFzZVNlcnZpY2UuZmIuZGF0YWJhc2UoKS5yZWYoJ2J1aWxkaW5ncycpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5maXJlYmFzZScpXG4gICAgICAgIC5zZXJ2aWNlKCdmaXJlYmFzZVNlcnZpY2UnLCBmaXJlYmFzZVNlcnZpY2UpO1xuXG5cbiAgICBmdW5jdGlvbiBmaXJlYmFzZVNlcnZpY2UoKSB7XG4gICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICBhcGlLZXk6IFwiQUl6YVN5QjVxODFBR0dveDRpOC1RTDJLT3RuRERmaTA1aXJnY0hFXCIsXG4gICAgICAgICAgICBhdXRoRG9tYWluOiBcInNvY2lhbHN0cmF0YWlkZWF0ZWFtLmZpcmViYXNlYXBwLmNvbVwiLFxuICAgICAgICAgICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9zb2NpYWxzdHJhdGFpZGVhdGVhbS5maXJlYmFzZWlvLmNvbVwiLFxuICAgICAgICAgICAgc3RvcmFnZUJ1Y2tldDogXCJcIixcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmZiID0gZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChjb25maWcpO1xuICAgIH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwLm1lc3NhZ2VzJylcblxuICAgICAgICAuY29udHJvbGxlcignbWVzc2FnZXNDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckc3RhdGUnLFxuICAgICAgICAgICAgJyRzdGF0ZVBhcmFtcycsICckaW9uaWNBY3Rpb25TaGVldCcsXG4gICAgICAgICAgICAnJGlvbmljUG9wdXAnLCAnJGlvbmljU2Nyb2xsRGVsZWdhdGUnLCAnJHRpbWVvdXQnLCAnJGludGVydmFsJyxcbiAgICAgICAgICAgIG1lc3NhZ2VzQ29udHJvbGxlclxuICAgICAgICBdKVxuXG4gICAgZnVuY3Rpb24gbWVzc2FnZXNDb250cm9sbGVyKCRzY29wZSwgJHJvb3RTY29wZSwgJHN0YXRlLCAkc3RhdGVQYXJhbXMsICRpb25pY0FjdGlvblNoZWV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW9uaWNQb3B1cCwgJGlvbmljU2Nyb2xsRGVsZWdhdGUsICR0aW1lb3V0LCAkaW50ZXJ2YWwpIHtcblxuICAgICAgICAvLyBtb2NrIGFjcXVpcmluZyBkYXRhIHZpYSAkc3RhdGVQYXJhbXNcbiAgICAgICAgJHNjb3BlLnRvVXNlciA9IHtcbiAgICAgICAgICAgIF9pZDogJzUzNGI4ZTVhYWE1ZTdhZmMxYjIzZTY5YicsXG4gICAgICAgICAgICBwaWM6ICdodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tL2ltZy9kb2NzL3ZlbmttYW4uanBnJyxcbiAgICAgICAgICAgIGNoYW5uZWw6ICRzdGF0ZS5wYXJhbXMuY2hhbm5lbElkXG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzIGNvdWxkIGJlIG9uICRyb290U2NvcGUgcmF0aGVyIHRoYW4gaW4gJHN0YXRlUGFyYW1zXG4gICAgICAgICRzY29wZS51c2VyID0ge1xuICAgICAgICAgICAgX2lkOiAnNTM0YjhmYjJhYTVlN2FmYzFiMjNlNjljJyxcbiAgICAgICAgICAgIHBpYzogJ2h0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20vaW1nL2RvY3MvbWNmbHkuanBnJyxcbiAgICAgICAgICAgIHVzZXJuYW1lOiAnTWFydHknXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmlucHV0ID0ge1xuICAgICAgICAgICAgbWVzc2FnZTogbG9jYWxTdG9yYWdlWyd1c2VyTWVzc2FnZS0nICsgJHNjb3BlLnRvVXNlci5faWRdIHx8ICcnXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1lc3NhZ2VDaGVja1RpbWVyO1xuXG4gICAgICAgIHZhciB2aWV3U2Nyb2xsID0gJGlvbmljU2Nyb2xsRGVsZWdhdGUuJGdldEJ5SGFuZGxlKCd1c2VyTWVzc2FnZVNjcm9sbCcpO1xuICAgICAgICB2YXIgZm9vdGVyQmFyOyAvLyBnZXRzIHNldCBpbiAkaW9uaWNWaWV3LmVudGVyXG4gICAgICAgIHZhciBzY3JvbGxlcjtcbiAgICAgICAgdmFyIHR4dElucHV0OyAvLyBeXl5cblxuICAgICAgICAkc2NvcGUuJG9uKCckaW9uaWNWaWV3LmVudGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXJNZXNzYWdlcyAkaW9uaWNWaWV3LmVudGVyJyk7XG5cbiAgICAgICAgICAgIGdldE1lc3NhZ2VzKCk7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmb290ZXJCYXIgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJyN1c2VyTWVzc2FnZXNWaWV3IC5iYXItZm9vdGVyJyk7XG4gICAgICAgICAgICAgICAgc2Nyb2xsZXIgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJyN1c2VyTWVzc2FnZXNWaWV3IC5zY3JvbGwtY29udGVudCcpO1xuICAgICAgICAgICAgICAgIHR4dElucHV0ID0gYW5ndWxhci5lbGVtZW50KGZvb3RlckJhci5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYScpKTtcbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgICAgICBtZXNzYWdlQ2hlY2tUaW1lciA9ICRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gaGVyZSB5b3UgY291bGQgY2hlY2sgZm9yIG5ldyBtZXNzYWdlcyBpZiB5b3VyIGFwcCBkb2Vzbid0IHVzZSBwdXNoIG5vdGlmaWNhdGlvbnMgb3IgdXNlciBkaXNhYmxlZCB0aGVtXG4gICAgICAgICAgICB9LCAyMDAwMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyRpb25pY1ZpZXcubGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbGVhdmluZyBVc2VyTWVzc2FnZXMgdmlldywgZGVzdHJveWluZyBpbnRlcnZhbCcpO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGludGVydmFsIGlzIGRlc3Ryb3llZFxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG1lc3NhZ2VDaGVja1RpbWVyKSkge1xuICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwobWVzc2FnZUNoZWNrVGltZXIpO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VDaGVja1RpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckaW9uaWNWaWV3LmJlZm9yZUxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEkc2NvcGUuaW5wdXQubWVzc2FnZSB8fCAkc2NvcGUuaW5wdXQubWVzc2FnZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlck1lc3NhZ2UtJyArICRzY29wZS50b1VzZXIuX2lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TWVzc2FnZXMoKSB7XG4gICAgICAgICAgICAkc2NvcGUubWVzc2FnZXMgPSBbe1xuICAgICAgICAgICAgICAgIFwiX2lkXCI6IFwiNTM1ZDYyNWY4OThkZjRlODBlMmExMjVlXCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiSW9uaWMgaGFzIGNoYW5nZWQgdGhlIGdhbWUgZm9yIGh5YnJpZCBhcHAgZGV2ZWxvcG1lbnQuXCIsXG4gICAgICAgICAgICAgICAgXCJ1c2VySWRcIjogXCI1MzRiOGZiMmFhNWU3YWZjMWIyM2U2OWNcIixcbiAgICAgICAgICAgICAgICBcImRhdGVcIjogXCIyMDE0LTA0LTI3VDIwOjAyOjM5LjA4MlpcIixcbiAgICAgICAgICAgICAgICBcInJlYWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlYWREYXRlXCI6IFwiMjAxNC0xMi0wMVQwNjoyNzozNy45NDRaXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIjUzNWYxM2ZmZWUzYjJhNjgxMTJiOWZjMFwiLFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIkkgbGlrZSBJb25pYyBiZXR0ZXIgdGhhbiBpY2UgY3JlYW0hXCIsXG4gICAgICAgICAgICAgICAgXCJ1c2VySWRcIjogXCI1MzRiOGU1YWFhNWU3YWZjMWIyM2U2OWJcIixcbiAgICAgICAgICAgICAgICBcImRhdGVcIjogXCIyMDE0LTA0LTI5VDAyOjUyOjQ3LjcwNlpcIixcbiAgICAgICAgICAgICAgICBcInJlYWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlYWREYXRlXCI6IFwiMjAxNC0xMi0wMVQwNjoyNzozNy45NDRaXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIjU0NmE1ODQzZmQ0YzVkNTgxZWZhMjYzYVwiLFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bS5cIixcbiAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBcIjUzNGI4ZmIyYWE1ZTdhZmMxYjIzZTY5Y1wiLFxuICAgICAgICAgICAgICAgIFwiZGF0ZVwiOiBcIjIwMTQtMTEtMTdUMjA6MTk6MTUuMjg5WlwiLFxuICAgICAgICAgICAgICAgIFwicmVhZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVhZERhdGVcIjogXCIyMDE0LTEyLTAxVDA2OjI3OjM4LjMyOFpcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiX2lkXCI6IFwiNTQ3NjQzOTlhYjQzZDFkNDExM2FiZmQxXCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiQW0gSSBkcmVhbWluZz9cIixcbiAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBcIjUzNGI4ZTVhYWE1ZTdhZmMxYjIzZTY5YlwiLFxuICAgICAgICAgICAgICAgIFwiZGF0ZVwiOiBcIjIwMTQtMTEtMjZUMjE6MTg6MTcuNTkxWlwiLFxuICAgICAgICAgICAgICAgIFwicmVhZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVhZERhdGVcIjogXCIyMDE0LTEyLTAxVDA2OjI3OjM4LjMzN1pcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiX2lkXCI6IFwiNTQ3NjQzYWVhYjQzZDFkNDExM2FiZmQyXCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiSXMgdGhpcyBtYWdpYz9cIixcbiAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBcIjUzNGI4ZmIyYWE1ZTdhZmMxYjIzZTY5Y1wiLFxuICAgICAgICAgICAgICAgIFwiZGF0ZVwiOiBcIjIwMTQtMTEtMjZUMjE6MTg6MzguNTQ5WlwiLFxuICAgICAgICAgICAgICAgIFwicmVhZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVhZERhdGVcIjogXCIyMDE0LTEyLTAxVDA2OjI3OjM4LjMzOFpcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiX2lkXCI6IFwiNTQ3ODE1ZGJhYjQzZDFkNDExM2FiZmVmXCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiR2VlIHdpeiwgdGhpcyBpcyBzb21ldGhpbmcgc3BlY2lhbC5cIixcbiAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBcIjUzNGI4ZTVhYWE1ZTdhZmMxYjIzZTY5YlwiLFxuICAgICAgICAgICAgICAgIFwiZGF0ZVwiOiBcIjIwMTQtMTEtMjhUMDY6Mjc6NDAuMDAxWlwiLFxuICAgICAgICAgICAgICAgIFwicmVhZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVhZERhdGVcIjogXCIyMDE0LTEyLTAxVDA2OjI3OjM4LjMzOFpcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiX2lkXCI6IFwiNTQ3ODFjNjlhYjQzZDFkNDExM2FiZmYwXCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiSSB0aGluayBJIGxpa2UgSW9uaWMgbW9yZSB0aGFuIEkgbGlrZSBpY2UgY3JlYW0hXCIsXG4gICAgICAgICAgICAgICAgXCJ1c2VySWRcIjogXCI1MzRiOGZiMmFhNWU3YWZjMWIyM2U2OWNcIixcbiAgICAgICAgICAgICAgICBcImRhdGVcIjogXCIyMDE0LTExLTI4VDA2OjU1OjM3LjM1MFpcIixcbiAgICAgICAgICAgICAgICBcInJlYWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlYWREYXRlXCI6IFwiMjAxNC0xMi0wMVQwNjoyNzozOC4zMzhaXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIjU0NzgxY2E0YWI0M2QxZDQxMTNhYmZmMVwiLFxuICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIlllYSwgaXQncyBwcmV0dHkgc3dlZXRcIixcbiAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBcIjUzNGI4ZTVhYWE1ZTdhZmMxYjIzZTY5YlwiLFxuICAgICAgICAgICAgICAgIFwiZGF0ZVwiOiBcIjIwMTQtMTEtMjhUMDY6NTY6MzYuNDcyWlwiLFxuICAgICAgICAgICAgICAgIFwicmVhZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVhZERhdGVcIjogXCIyMDE0LTEyLTAxVDA2OjI3OjM4LjMzOFpcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwiX2lkXCI6IFwiNTQ3OGRmODZhYjQzZDFkNDExM2FiZmY0XCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiV293LCB0aGlzIGlzIHJlYWxseSBzb21ldGhpbmcgaHVoP1wiLFxuICAgICAgICAgICAgICAgIFwidXNlcklkXCI6IFwiNTM0YjhmYjJhYTVlN2FmYzFiMjNlNjljXCIsXG4gICAgICAgICAgICAgICAgXCJkYXRlXCI6IFwiMjAxNC0xMS0yOFQyMDo0ODowNi41NzJaXCIsXG4gICAgICAgICAgICAgICAgXCJyZWFkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJyZWFkRGF0ZVwiOiBcIjIwMTQtMTItMDFUMDY6Mjc6MzguMzM5WlwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJfaWRcIjogXCI1NDc4MWNhNGFiNDNkMWQ0MTEzYWJmZjFcIixcbiAgICAgICAgICAgICAgICBcInRleHRcIjogXCJDcmVhdGUgYW1hemluZyBhcHBzIC0gaW9uaWNmcmFtZXdvcmsuY29tXCIsXG4gICAgICAgICAgICAgICAgXCJ1c2VySWRcIjogXCI1MzRiOGU1YWFhNWU3YWZjMWIyM2U2OWJcIixcbiAgICAgICAgICAgICAgICBcImRhdGVcIjogXCIyMDE0LTExLTI5VDA2OjU2OjM2LjQ3MlpcIixcbiAgICAgICAgICAgICAgICBcInJlYWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlYWREYXRlXCI6IFwiMjAxNC0xMi0wMVQwNjoyNzozOC4zMzhaXCJcbiAgICAgICAgICAgIH1dO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnaW5wdXQubWVzc2FnZScsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbnB1dC5tZXNzYWdlICR3YXRjaCwgbmV3VmFsdWUgJyArIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIGlmICghbmV3VmFsdWUpIG5ld1ZhbHVlID0gJyc7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2VbJ3VzZXJNZXNzYWdlLScgKyAkc2NvcGUudG9Vc2VyLl9pZF0gPSBuZXdWYWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLnNlbmRNZXNzYWdlID0gZnVuY3Rpb24gKHNlbmRNZXNzYWdlRm9ybSkge1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgdG9JZDogJHNjb3BlLnRvVXNlci5faWQsXG4gICAgICAgICAgICAgICAgdGV4dDogJHNjb3BlLmlucHV0Lm1lc3NhZ2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIGlmIHlvdSBkbyBhIHdlYiBzZXJ2aWNlIGNhbGwgdGhpcyB3aWxsIGJlIG5lZWRlZCBhcyB3ZWxsIGFzIGJlZm9yZSB0aGUgdmlld1Njcm9sbCBjYWxsc1xuICAgICAgICAgICAgLy8geW91IGNhbid0IHNlZSB0aGUgZWZmZWN0IG9mIHRoaXMgaW4gdGhlIGJyb3dzZXIgaXQgbmVlZHMgdG8gYmUgdXNlZCBvbiBhIHJlYWwgZGV2aWNlXG4gICAgICAgICAgICAvLyBmb3Igc29tZSByZWFzb24gdGhlIG9uZSB0aW1lIGJsdXIgZXZlbnQgaXMgbm90IGZpcmluZyBpbiB0aGUgYnJvd3NlciBidXQgZG9lcyBvbiBkZXZpY2VzXG4gICAgICAgICAgICBrZWVwS2V5Ym9hcmRPcGVuKCk7XG5cbiAgICAgICAgICAgIC8vTW9ja1NlcnZpY2Uuc2VuZE1lc3NhZ2UobWVzc2FnZSkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkc2NvcGUuaW5wdXQubWVzc2FnZSA9ICcnO1xuXG4gICAgICAgICAgICBtZXNzYWdlLl9pZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOyAvLyA6filcbiAgICAgICAgICAgIG1lc3NhZ2UuZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBtZXNzYWdlLnVzZXJuYW1lID0gJHNjb3BlLnVzZXIudXNlcm5hbWU7XG4gICAgICAgICAgICBtZXNzYWdlLnVzZXJJZCA9ICRzY29wZS51c2VyLl9pZDtcbiAgICAgICAgICAgIG1lc3NhZ2UucGljID0gJHNjb3BlLnVzZXIucGljdHVyZTtcblxuICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBrZWVwS2V5Ym9hcmRPcGVuKCk7XG4gICAgICAgICAgICAgICAgdmlld1Njcm9sbC5zY3JvbGxCb3R0b20odHJ1ZSk7XG4gICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlcy5wdXNoKE1vY2tTZXJ2aWNlLmdldE1vY2tNZXNzYWdlKCkpO1xuICAgICAgICAgICAgICAgIGtlZXBLZXlib2FyZE9wZW4oKTtcbiAgICAgICAgICAgICAgICB2aWV3U2Nyb2xsLnNjcm9sbEJvdHRvbSh0cnVlKTtcbiAgICAgICAgICAgIH0sIDIwMDApO1xuXG4gICAgICAgICAgICAvL30pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHRoaXMga2VlcHMgdGhlIGtleWJvYXJkIG9wZW4gb24gYSBkZXZpY2Ugb25seSBhZnRlciBzZW5kaW5nIGEgbWVzc2FnZSwgaXQgaXMgbm9uIG9idHJ1c2l2ZVxuICAgICAgICBmdW5jdGlvbiBrZWVwS2V5Ym9hcmRPcGVuKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2tlZXBLZXlib2FyZE9wZW4nKTtcbiAgICAgICAgICAgIHR4dElucHV0Lm9uZSgnYmx1cicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndGV4dGFyZWEgYmx1ciwgZm9jdXMgYmFjayBvbiBpdCcpO1xuICAgICAgICAgICAgICAgIHR4dElucHV0WzBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9uUHJvZmlsZVBpY0Vycm9yKGVsZSkge1xuICAgICAgICAgICAgdGhpcy5lbGUuc3JjID0gJyc7IC8vIHNldCBhIGZhbGxiYWNrXG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUub25NZXNzYWdlSG9sZCA9IGZ1bmN0aW9uIChlLCBpdGVtSW5kZXgsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvbk1lc3NhZ2VIb2xkJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbWVzc2FnZTogJyArIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UsIG51bGwsIDIpKTtcbiAgICAgICAgICAgICRpb25pY0FjdGlvblNoZWV0LnNob3coe1xuICAgICAgICAgICAgICAgIGJ1dHRvbnM6IFt7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdDb3B5IFRleHQnXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRGVsZXRlIE1lc3NhZ2UnXG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgYnV0dG9uQ2xpY2tlZDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogLy8gQ29weSBUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb3Jkb3ZhLnBsdWdpbnMuY2xpcGJvYXJkLmNvcHkobWVzc2FnZS50ZXh0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiAvLyBEZWxldGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBubyBzZXJ2ZXIgc2lkZSBzZWNyZXRzIGhlcmUgOn4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2VzLnNwbGljZShpdGVtSW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld1Njcm9sbC5yZXNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gdGhpcyBwcm9iIHNlZW1zIHdlaXJkIGhlcmUgYnV0IEkgaGF2ZSByZWFzb25zIGZvciB0aGlzIGluIG15IGFwcCwgc2VjcmV0IVxuICAgICAgICAkc2NvcGUudmlld1Byb2ZpbGUgPSBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAgICAgICBpZiAobXNnLnVzZXJJZCA9PT0gJHNjb3BlLnVzZXIuX2lkKSB7XG4gICAgICAgICAgICAgICAgLy8gZ28gdG8geW91ciBwcm9maWxlXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGdvIHRvIG90aGVyIHVzZXJzIHByb2ZpbGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJIGVtaXQgdGhpcyBldmVudCBmcm9tIHRoZSBtb25vc3BhY2VkLmVsYXN0aWMgZGlyZWN0aXZlLCByZWFkIGxpbmUgNDgwXG4gICAgICAgICRzY29wZS4kb24oJ3RhUmVzaXplJywgZnVuY3Rpb24gKGUsIHRhKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygndGFSZXNpemUnKTtcbiAgICAgICAgICAgIGlmICghdGEpIHJldHVybjtcblxuICAgICAgICAgICAgdmFyIHRhSGVpZ2h0ID0gdGFbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3RhSGVpZ2h0OiAnICsgdGFIZWlnaHQpO1xuXG4gICAgICAgICAgICBpZiAoIWZvb3RlckJhcikgcmV0dXJuO1xuXG4gICAgICAgICAgICB2YXIgbmV3Rm9vdGVySGVpZ2h0ID0gdGFIZWlnaHQgKyAxMDtcbiAgICAgICAgICAgIG5ld0Zvb3RlckhlaWdodCA9IChuZXdGb290ZXJIZWlnaHQgPiA0NCkgPyBuZXdGb290ZXJIZWlnaHQgOiA0NDtcblxuICAgICAgICAgICAgZm9vdGVyQmFyLnN0eWxlLmhlaWdodCA9IG5ld0Zvb3RlckhlaWdodCArICdweCc7XG4gICAgICAgICAgICBzY3JvbGxlci5zdHlsZS5ib3R0b20gPSBuZXdGb290ZXJIZWlnaHQgKyAncHgnO1xuICAgICAgICB9KTtcblxuICAgIH1cbn0pKCk7XG5cblxuXG5cbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAubWVzc2FnZXMnKVxuXG4gICAgICAgIC5maWx0ZXIoJ25sMmJyJywgWyckZmlsdGVyJywgbmwyYnJdKVxuXG4gICAgZnVuY3Rpb24gbmwyYnIoJGZpbHRlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5yZXBsYWNlKC9cXG5cXHI/L2csICc8YnIgLz4nKTtcbiAgICAgICAgfTtcbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAubWVzc2FnZXMnKVxuICAgICAgICAuc2VydmljZSgnbWVzc2FnZXNTZXJ2aWNlJywgbWVzc2FnZXNTZXJ2aWNlKTtcblxuICAgIGZ1bmN0aW9uIG1lc3NhZ2VzU2VydmljZShmaXJlYmFzZVNlcnZpY2UpIHtcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7fTtcblxuICAgICAgICBzZXJ2aWNlLmdldE1lc3NhZ2VzUmVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdtZXNzYWdlcycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlcnZpY2UuYWRkTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlyZWJhc2VTZXJ2aWNlLmZiLmRhdGFiYXNlKCkucHVzaChtZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgIH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHAucHJvZmlsZXNcIilcblxuICAgICAgICAuY29udHJvbGxlcihcInByb2ZpbGVDb250cm9sbGVyXCIsIHByb2ZpbGVDb250cm9sbGVyKTtcblxuXG4gICAgZnVuY3Rpb24gcHJvZmlsZUNvbnRyb2xsZXIoJHNjb3BlLCAkaW9uaWNMb2FkaW5nLCAkaW9uaWNQb3B1cCwgYXV0aFNlcnZpY2UsIHByb2ZpbGVzU2VydmljZSkge1xuXG5cdFx0dmFyIHVzZXIgPSBhdXRoU2VydmljZS51c2VyKCk7XG5cdFx0XG5cdFx0JHNjb3BlLmRhdGEgPSB7XG5cdFx0XHRkaXNwbGF5TmFtZSA6IHVzZXIgPyB1c2VyLmRpc3BsYXlOYW1lIDogXCJcIixcblx0XHRcdGVtYWlsIDogdXNlciA/IHVzZXIuZW1haWwgOiBcIlwiXG5cdFx0fTtcblxuICAgICAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQkaW9uaWNMb2FkaW5nLnNob3coKTtcblxuICAgICAgICAgICAgcHJvZmlsZXNTZXJ2aWNlLnVwZGF0ZVByb2ZpbGUoJHNjb3BlLmRhdGEpLnRoZW4oZnVuY3Rpb24gc3VjY2Vzcyhtc2cpIHtcblx0XHRcdFx0JGlvbmljTG9hZGluZy5oaWRlKCk7XG5cblx0XHRcdFx0JGlvbmljUG9wdXAuYWxlcnQoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1Byb2ZpbGVVcGRhdGUhJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IG1zZ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvcikge1xuXHRcdFx0XHQkaW9uaWNMb2FkaW5nLmhpZGUoKTtcblxuXHRcdFx0XHQkaW9uaWNQb3B1cC5hbGVydCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnVXBkYXRlIGZhaWxlZCEnLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcC5wcm9maWxlc1wiKVxuXG4gICAgICAgIC5zZXJ2aWNlKFwicHJvZmlsZXNTZXJ2aWNlXCIsIHByb2ZpbGVzU2VydmljZSk7XG5cblxuICAgIGZ1bmN0aW9uIHByb2ZpbGVzU2VydmljZSgkcSwgJHJvb3RTY29wZSwgYXV0aFNlcnZpY2UsIHVzZXIpIHtcblx0XHRcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVwZGF0ZVByb2ZpbGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgYXV0aFNlcnZpY2UudXNlcigpLnVwZGF0ZVByb2ZpbGUoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoXCJQcm9maWxlIHVwZGF0ZWQhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9IGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnbmFtZS1jaGFuZ2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwLnNpZGVtZW51XCIpXG5cbiAgICAgICAgLmNvbnRyb2xsZXIoXCJzaWRlbWVudUNvbnRyb2xsZXJcIiwgc2lkZW1lbnVDb250cm9sbGVyKTtcblxuXG4gICAgZnVuY3Rpb24gc2lkZW1lbnVDb250cm9sbGVyKCRzY29wZSwgYXV0aFNlcnZpY2UsIG1lc3NhZ2VzU2VydmljZSkge1xuXHRcdCRzY29wZS4kb24oJ25hbWUtY2hhbmdlZCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0JHNjb3BlLmRpc3BsYXlOYW1lID0gYXV0aFNlcnZpY2UudXNlcigpLmRpc3BsYXlOYW1lO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHZhciB1c2VyID0gYXV0aFNlcnZpY2UudXNlcigpO1xuXHRcdCRzY29wZS5kaXNwbGF5TmFtZSA9IHVzZXIgPyB1c2VyLmRpc3BsYXlOYW1lIDogXCJFZGl0IE5hbWVcIjtcbiAgICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwLnVzZXJzXCIpXG5cbiAgICAgICAgLnNlcnZpY2UoXCJ1c2Vyc1NlcnZpY2VcIiwgdXNlcnNTZXJ2aWNlKTtcblxuXG4gICAgZnVuY3Rpb24gdXNlcnNTZXJ2aWNlKCRxLCBhdXRoU2VydmljZSkge1xuXHQgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVwZGF0ZVByb2ZpbGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgYXV0aFNlcnZpY2UudXNlcigpLnVwZGF0ZVByb2ZpbGUoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2VzcygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoXCJQcm9maWxlIHVwZGF0ZWQhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9IGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnbmFtZS1jaGFuZ2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG5cbiAgICAgICAgLm1vZHVsZSgnYXBwJywgW1xuICAgICAgICAgICAgJ2lvbmljJyxcbiAgICAgICAgICAgICdtb25vc3BhY2VkLmVsYXN0aWMnLFxuXG4gICAgICAgICAgICAnYXBwLmZpcmViYXNlJyxcbiAgICAgICAgICAgICdhcHAuYXV0aCcsXG4gICAgICAgICAgICAnYXBwLnNpZGVtZW51JyxcbiAgICAgICAgICAgICdhcHAuYnVpbGRpbmdzJyxcbiAgICAgICAgICAgICdhcHAucHJvZmlsZXMnLFxuICAgICAgICAgICAgJ2FwcC5tZXNzYWdlcydcbiAgICAgICAgXSlcblxuICAgICAgICAudmFsdWUoXCJ1c2VyXCIsIG51bGwpXG5cbiAgICAgICAgLnJ1bihmdW5jdGlvbiAoJGlvbmljUGxhdGZvcm0sICR0aW1lb3V0LCAkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgICAkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jb3Jkb3ZhICYmIHdpbmRvdy5jb3Jkb3ZhLnBsdWdpbnMuS2V5Ym9hcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZG92YS5wbHVnaW5zLktleWJvYXJkLmhpZGVLZXlib2FyZEFjY2Vzc29yeUJhcih0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICBjb3Jkb3ZhLnBsdWdpbnMuS2V5Ym9hcmQuZGlzYWJsZVNjcm9sbCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5TdGF0dXNCYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgU3RhdHVzQmFyLnN0eWxlRGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnbmFtZS1jaGFuZ2VkJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG59KSgpO1xuXG5cbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXG5cbiAgICAgICAgLnJ1bihbJyRyb290U2NvcGUnLCAnJGxvY2F0aW9uJywgJ2F1dGhTZXJ2aWNlJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRzdGF0ZSwgYXV0aFNlcnZpY2UpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGF1dGhTZXJ2aWNlLnVzZXIoKSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfV0pXG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG5cbiAgICAgICAgLm1vZHVsZSgnYXBwJylcblxuICAgICAgICAuY29uZmlnKGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG5cbiAgICAgICAgICAgICRzdGF0ZVByb3ZpZGVyXG5cbiAgICAgICAgICAgICAgICAuc3RhdGUoJ2FwcCcsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2FwcCcsXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc2lkZW1lbnUuaHRtbCcsXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnYXBwLmJ1aWxkaW5ncycsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2J1aWxkaW5ncycsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWVudUNvbnRlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9idWlsZGluZ3MuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAuc3RhdGUoJ2FwcC5idWlsZGluZycsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2J1aWxkaW5ncy86YnVpbGRpbmdJZCcsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWVudUNvbnRlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9idWlsZGluZy5odG1sJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnYXBwLmNoYW5uZWwnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9idWlsZGluZ3MvOmJ1aWxkaW5nSWQvOmNoYW5uZWxJZCcsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWVudUNvbnRlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9tZXNzYWdlcy9jaGF0Lmh0bWwnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdhcHAucHJvZmlsZScsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL3Byb2ZpbGUnLFxuICAgICAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWVudUNvbnRlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wcm9maWxlL3Byb2ZpbGUuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAuc3RhdGUoJ2FwcC5sb2dvdXQnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvbG9naW5cIixcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVQcm92aWRlcjogZnVuY3Rpb24gKGF1dGhTZXJ2aWNlLCAkc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdsb2dpbicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuc3RhdGUoJ2xvZ2luJywge1xuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL2xvZ2luXCIsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL2F1dGgvbG9naW4uaHRtbFwiXG4gICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgLy9mYWxsYmFja1xuICAgICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2xvZ2luJyk7XG5cbiAgICAgICAgfSk7XG59KSgpO1xuXG5cblxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
