!function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.buildings",["app.firebase"])}(),function(){"use strict";angular.module("app.channels",[])}(),function(){"use strict";angular.module("app.directmessages",[])}(),function(){"use strict";angular.module("app.firebase",[])}(),function(){"use strict";angular.module("monospaced.elastic",[]).constant("msdElasticConfig",{append:""}).directive("msdElastic",["$timeout","$window","msdElasticConfig",function(e,t,a){return{require:"ngModel",restrict:"A, C",link:function(n,i,r,o){function s(){var e=h;g=c,w=getComputedStyle(c),angular.forEach(U,function(t){e+=t+":"+w.getPropertyValue(t)+";"}),$.setAttribute("style",e)}function u(){var t,a,i,r,o;g!==c&&s(),f||(f=!0,$.value=c.value+m,$.style.overflowY=c.style.overflowY,t=""===c.style.height?"auto":parseInt(c.style.height,10),a=getComputedStyle(c).getPropertyValue("width"),"px"===a.substr(a.length-2,2)&&(r=parseInt(a,10)-x.width,$.style.width=r+"px"),i=$.scrollHeight,i>C?(i=C,o="scroll"):k>i&&(i=k),i+=x.height,c.style.overflowY=o||"hidden",t!==i&&(n.$emit("elastic:resize",d,t,i),c.style.height=i+"px"),e(function(){f=!1},1,!1))}function l(){f=!1,u()}var c=i[0],d=i;if("TEXTAREA"===c.nodeName&&t.getComputedStyle){d.css({overflow:"hidden","overflow-y":"hidden","word-wrap":"break-word"});var p=c.value;c.value="",c.value=p;var g,f,m=r.msdElastic?r.msdElastic.replace(/\\n/g,"\n"):a.append,b=angular.element(t),h="position: absolute; top: -999px; right: auto; bottom: auto;left: 0; overflow: hidden; -webkit-box-sizing: content-box;-moz-box-sizing: content-box; box-sizing: content-box;min-height: 0 !important; height: 0 !important; padding: 0;word-wrap: break-word; border: 0;",v=angular.element('<textarea aria-hidden="true" tabindex="-1" style="'+h+'"/>').data("elastic",!0),$=v[0],w=getComputedStyle(c),y=w.getPropertyValue("resize"),S="border-box"===w.getPropertyValue("box-sizing")||"border-box"===w.getPropertyValue("-moz-box-sizing")||"border-box"===w.getPropertyValue("-webkit-box-sizing"),x=S?{width:parseInt(w.getPropertyValue("border-right-width"),10)+parseInt(w.getPropertyValue("padding-right"),10)+parseInt(w.getPropertyValue("padding-left"),10)+parseInt(w.getPropertyValue("border-left-width"),10),height:parseInt(w.getPropertyValue("border-top-width"),10)+parseInt(w.getPropertyValue("padding-top"),10)+parseInt(w.getPropertyValue("padding-bottom"),10)+parseInt(w.getPropertyValue("border-bottom-width"),10)}:{width:0,height:0},I=parseInt(w.getPropertyValue("min-height"),10),P=parseInt(w.getPropertyValue("height"),10),k=Math.max(I,P)-x.height,C=parseInt(w.getPropertyValue("max-height"),10),U=["font-family","font-size","font-weight","font-style","letter-spacing","line-height","text-transform","word-spacing","text-indent"];d.data("elastic")||(C=C&&C>0?C:9e4,$.parentNode!==document.body&&angular.element(document.body).append($),d.css({resize:"none"===y||"vertical"===y?"none":"horizontal"}).data("elastic",!0),"onpropertychange"in c&&"oninput"in c?c.oninput=c.onkeyup=u:c.oninput=u,b.bind("resize",l),n.$watch(function(){return o.$modelValue},function(e){l()}),n.$on("elastic:adjust",function(){s(),l()}),e(u,0,!1),n.$on("$destroy",function(){v.remove(),b.unbind("resize",l)}))}}}}]),angular.module("app.messages",["monospaced.elastic"])}(),function(){"use strict";angular.module("app.profiles",["app.auth"])}(),function(){"use strict";angular.module("app.sidemenu",[])}(),function(){"use strict";angular.module("app.users",["app.auth"])}(),function(){"use strict";function e(e,t,a,n,i,r){e.data={},e.login=function(){n.show(),t.login(e.data.username,e.data.password).success(function(e){n.hide(),i.go("app.buildings")}).error(function(e){r(function(){n.hide()},100);a.alert({title:"Login failed!",template:e.message})})},e.facebookLogin=function(){a.alert({title:"Facebook login",template:"Planned!"})}}e.$inject=["$scope","authService","$ionicPopup","$ionicLoading","$state","$timeout"],angular.module("app.auth").controller("authController",e)}(),function(){"use strict";function e(e,t,a,n,i){var r=firebase.auth();return t.$on("name-changed",function(){var e=firebase.auth().currentUser;null!=e&&firebase.database().ref("users/"+e.uid).set({name:e.displayName,email:e.email,lastActivity:(new Date).getTime()})}),{login:function(n,i){var o=e.defer(),s=o.promise,u=function(e){e.isNew=null==e.displayName,o.resolve(e),a=firebase.auth().currentUser,t.$emit("name-changed")},l=function(e){o.reject(e)};return r.signInWithEmailAndPassword(n,i).then(u,function c(c){"auth/user-not-found"==c.code?r.createUserWithEmailAndPassword(n,i).then(u,l):l(c)}),s.success=function(e){return s.then(e),s},s.error=function(e){return s.then(null,e),s},s},logout:function(){r.signOut(),a=firebase.auth().currentUser},user:function(){return firebase.auth().currentUser}}}e.$inject=["$q","$rootScope","user","buildingsService","selectedBuilding"],angular.module("app.auth").service("authService",e)}(),function(){"use strict";function e(e,t,a,n){var i=n.getChannelsFrom(a.buildingId);t.show(),i.on("value",function(a){var n=a.val();n&&(e.channels=angular.extend(n.common,n.services)),t.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred."});t.hide()})}e.$inject=["$scope","$ionicLoading","$stateParams","channelsService"],angular.module("app.buildings").controller("buildingController",e)}(),function(){"use strict";function e(e,t,a,n){var i=a.getBuildings();e.selectedKey=n?n.key:null,e.select=function(t,a){e.selectedKey=a.key=t,n=a,e.$emit("building-selected",n)},t.show(),i.on("value",function(a){e.buildings=a.val(),t.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred"});t.hide()})}e.$inject=["$scope","$ionicLoading","buildingsService","selectedBuilding"],angular.module("app.buildings").controller("buildingsController",e)}(),function(){"use strict";function e(e,t){return{getBuildings:function(){return firebase.database().ref("buildings")}}}e.$inject=["firebaseService","$rootScope"],angular.module("app.buildings").service("buildingsService",e)}(),function(){"use strict";function e(){var e={};return e.channels={landlord:"Talk to landlord",general:"General",parking:"Parking Garage",garden:"Garden",lostfound:"Lost & Found",maintenance:"Request Maintenance"},e.getChannelsFrom=function(e){return firebase.database().ref("buildings/"+e+"/channels")},e}angular.module("app.channels").service("channelsService",e)}(),function(){"use strict";function e(e,t,a,n){var i=n.user();console.log(i.uid);var r=a.getUserContacts(i.uid);console.log(r),t.show(),r.on("value",function(a){var n=a.val();n?e.contacts=angular.extend(n.common,n.services):console.log(n),t.hide()},function(e){console.log("error reading: "+e.code),t.hide();$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred."})}),console.log(e.contacts)}angular.module("app.directmessages").controller("directMessagesController",["$scope","$ionicLoading","directMessagesService","authService",e])}(),function(){"use strict";function e(e){var t={};return t.getUserContacts=function(t){return e.fb.database().ref("users/"+t+"/contacts")},t}e.$inject=["firebaseService"],angular.module("app.directmessages").service("directMessagesService",e)}(),function(){"use strict";function e(){var e={apiKey:"AIzaSyB5q81AGGox4i8-QL2KOtnDDfi05irgcHE",authDomain:"socialstrataideateam.firebaseapp.com",databaseURL:"https://socialstrataideateam.firebaseio.com",storageBucket:""};this.fb=firebase.initializeApp(e)}angular.module("app.firebase").service("firebaseService",e)}(),function(){"use strict";function e(e,t,a,n,i,r,o,s,u,l){function c(){e.messages=[{_id:"535d625f898df4e80e2a125e",text:"Ionic has changed the game for hybrid app development.",userId:"534b8fb2aa5e7afc1b23e69c",date:"2014-04-27T20:02:39.082Z",read:!0,readDate:"2014-12-01T06:27:37.944Z"},{_id:"535f13ffee3b2a68112b9fc0",text:"I like Ionic better than ice cream!",userId:"534b8e5aaa5e7afc1b23e69b",date:"2014-04-29T02:52:47.706Z",read:!0,readDate:"2014-12-01T06:27:37.944Z"},{_id:"546a5843fd4c5d581efa263a",text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",userId:"534b8fb2aa5e7afc1b23e69c",date:"2014-11-17T20:19:15.289Z",read:!0,readDate:"2014-12-01T06:27:38.328Z"},{_id:"54764399ab43d1d4113abfd1",text:"Am I dreaming?",userId:"534b8e5aaa5e7afc1b23e69b",date:"2014-11-26T21:18:17.591Z",read:!0,readDate:"2014-12-01T06:27:38.337Z"},{_id:"547643aeab43d1d4113abfd2",text:"Is this magic?",userId:"534b8fb2aa5e7afc1b23e69c",date:"2014-11-26T21:18:38.549Z",read:!0,readDate:"2014-12-01T06:27:38.338Z"},{_id:"547815dbab43d1d4113abfef",text:"Gee wiz, this is something special.",userId:"534b8e5aaa5e7afc1b23e69b",date:"2014-11-28T06:27:40.001Z",read:!0,readDate:"2014-12-01T06:27:38.338Z"},{_id:"54781c69ab43d1d4113abff0",text:"I think I like Ionic more than I like ice cream!",userId:"534b8fb2aa5e7afc1b23e69c",date:"2014-11-28T06:55:37.350Z",read:!0,readDate:"2014-12-01T06:27:38.338Z"},{_id:"54781ca4ab43d1d4113abff1",text:"Yea, it's pretty sweet",userId:"534b8e5aaa5e7afc1b23e69b",date:"2014-11-28T06:56:36.472Z",read:!0,readDate:"2014-12-01T06:27:38.338Z"},{_id:"5478df86ab43d1d4113abff4",text:"Wow, this is really something huh?",userId:"534b8fb2aa5e7afc1b23e69c",date:"2014-11-28T20:48:06.572Z",read:!0,readDate:"2014-12-01T06:27:38.339Z"},{_id:"54781ca4ab43d1d4113abff1",text:"Create amazing apps - ionicframework.com",userId:"534b8e5aaa5e7afc1b23e69b",date:"2014-11-29T06:56:36.472Z",read:!0,readDate:"2014-12-01T06:27:38.338Z"}]}function d(){console.log("keepKeyboardOpen"),m.one("blur",function(){console.log("textarea blur, focus back on it"),m[0].focus()})}e.channelName=l.channels[a.params.channelId],e.toUser={_id:"534b8e5aaa5e7afc1b23e69b",pic:"http://ionicframework.com/img/docs/venkman.jpg",channel:a.params.channelId},e.user={_id:"534b8fb2aa5e7afc1b23e69c",pic:"http://ionicframework.com/img/docs/mcfly.jpg",username:"Marty"},e.input={message:localStorage["userMessage-"+e.toUser._id]||""};var p,g,f,m,b=o.$getByHandle("userMessageScroll");e.$on("$ionicView.enter",function(){console.log("UserMessages $ionicView.enter"),c(),s(function(){g=document.body.querySelector("#userMessagesView .bar-footer"),f=document.body.querySelector("#userMessagesView .scroll-content"),m=angular.element(g.querySelector("textarea"))},0),p=u(function(){},2e4)}),e.$on("$ionicView.leave",function(){console.log("leaving UserMessages view, destroying interval"),angular.isDefined(p)&&(u.cancel(p),p=void 0)}),e.$on("$ionicView.beforeLeave",function(){e.input.message&&""!==e.input.message||localStorage.removeItem("userMessage-"+e.toUser._id)}),e.$watch("input.message",function(t,a){console.log("input.message $watch, newValue "+t),t||(t=""),localStorage["userMessage-"+e.toUser._id]=t}),e.sendMessage=function(t){var a={toId:e.toUser._id,text:e.input.message};d(),e.input.message="",a._id=(new Date).getTime(),a.date=new Date,a.username=e.user.username,a.userId=e.user._id,a.pic=e.user.picture,e.messages.push(a),s(function(){d(),b.scrollBottom(!0)},0),s(function(){e.messages.push(MockService.getMockMessage()),d(),b.scrollBottom(!0)},2e3)},e.onMessageHold=function(t,a,n){console.log("onMessageHold"),console.log("message: "+JSON.stringify(n,null,2)),i.show({buttons:[{text:"Copy Text"},{text:"Delete Message"}],buttonClicked:function(t){switch(t){case 0:break;case 1:e.messages.splice(a,1),s(function(){b.resize()},0)}return!0}})},e.viewProfile=function(t){t.userId===e.user._id},e.$on("taResize",function(e,t){if(console.log("taResize"),t){var a=t[0].offsetHeight;if(console.log("taHeight: "+a),g){var n=a+10;n=n>44?n:44,g.style.height=n+"px",f.style.bottom=n+"px"}}})}angular.module("app.messages").controller("messagesController",["$scope","$rootScope","$state","$stateParams","$ionicActionSheet","$ionicPopup","$ionicScrollDelegate","$timeout","$interval","channelsService",e])}(),function(){"use strict";function e(e){return function(e){return e?e.replace(/\n\r?/g,"<br />"):e}}angular.module("app.messages").filter("nl2br",["$filter",e])}(),function(){"use strict";function e(e){var t={};return t.getMessagesRef=function(){return e.fb.database().ref("messages")},t.addMessage=function(t){return e.fb.database().push(t)},t}e.$inject=["firebaseService"],angular.module("app.messages").service("messagesService",e)}(),function(){"use strict";function e(e,t,a,n,i){var r=n.user();e.data={displayName:r?r.displayName:"",email:r?r.email:""},e.update=function(){t.show(),i.updateProfile(e.data).then(function(e){t.hide(),a.alert({title:"ProfileUpdate!",template:e})},function n(n){t.hide(),a.alert({title:"Update failed!",template:n.message})})}}e.$inject=["$scope","$ionicLoading","$ionicPopup","authService","profilesService"],angular.module("app.profiles").controller("profileController",e)}(),function(){"use strict";function e(e,t,a,n){return{updateProfile:function(i){var r=e.defer();return a.user().updateProfile(i).then(function(){r.resolve("Profile updated!"),n=firebase.auth().currentUser,t.$broadcast("name-changed")},function o(o){r.reject(o)}),r.promise}}}e.$inject=["$q","$rootScope","authService","user"],angular.module("app.profiles").service("profilesService",e)}(),function(){"use strict";function e(e,t,a,n){e.user=n.user(),e.channels=a.channels,e.building={name:"Select a building",address:""},e.$on("building-selected",function(t,a){e.building.name=a.name,e.building.address=a.address}),e.openChannel=function(e){t.go("app.channel",{channelId:e})}}e.$inject=["$scope","$state","channelsService","authService"],angular.module("app.sidemenu").controller("sidemenuController",e)}(),function(){"use strict";function e(e,t){return{updateProfile:function(a){var n=e.defer();return t.user().updateProfile(a).then(function(){n.resolve("Profile updated!"),user=firebase.auth().currentUser,$rootScope.$broadcast("name-changed")},function i(i){n.reject(i)}),n.promise}}}e.$inject=["$q","authService"],angular.module("app.users").service("usersService",e)}(),function(){"use strict";angular.module("app",["ionic","monospaced.elastic","app.firebase","app.auth","app.channels","app.sidemenu","app.buildings","app.profiles","app.messages","app.directmessages"]).value("user",null).value("selectedBuilding",null).value("user",null).run(["$ionicPlatform","$timeout","$rootScope",function(e,t,a){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault(),a.$broadcast("name-changed")})}])}(),function(){"use strict";angular.module("app").run(["$rootScope","$location","authService",function(e,t,a){e.$on("$routeChangeStart",function(e){null==a.user()&&(e.preventDefault(),t.go("login"))})}])}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("app",{url:"/app",cache:!1,"abstract":!0,templateUrl:"views/sidemenu.html"}).state("app.buildings",{url:"/buildings",views:{menuContent:{templateUrl:"views/buildings.html"}}}).state("app.building",{url:"/buildings/:buildingId",views:{menuContent:{templateUrl:"views/building.html"}}}).state("app.channel",{url:"/channel/:channelId",views:{menuContent:{templateUrl:"views/messages/chat.html"}}}).state("app.profile",{url:"/profile",cache:!1,views:{menuContent:{templateUrl:"views/profile/profile.html"}}}).state("app.messages",{url:"/messages",cache:!1,views:{menuContent:{templateUrl:"views/messages/messages.html"}}}).state("app.logout",{url:"/login",templateProvider:["authService","$state",function(e,t){e.logout(),t.go("login")}]}).state("login",{url:"/login",templateUrl:"views/auth/login.html"}),t.otherwise("/login")}])}();
//# sourceMappingURL=data:application/json;base64,
