!function(){"use strict";angular.module("app.buildings",["app.firebase"])}(),function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.firebase",[])}(),function(){"use strict";angular.module("app.profiles",[])}(),function(){"use strict";angular.module("app.sidemenu",[])}(),function(){"use strict";function e(e){return{getChannelsFrom:function(i){return e.fb.database().ref("buildings/"+i+"/channels")}}}e.$inject=["firebaseService"],angular.module("app.buildings").service("buildingChannelsService",e)}(),function(){"use strict";function e(e,i,n,t){var a=t.getChannelsFrom(n.buildingId);i.show(),a.on("value",function(n){var t=n.val();t&&(e.channels=angular.extend(t.common,t.services)),i.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred."});i.hide()})}e.$inject=["$scope","$ionicLoading","$stateParams","buildingChannelsService"],angular.module("app.buildings").controller("buildingController",e)}(),function(){"use strict";function e(e,i,n){var t=n.getBuildings();i.show(),t.on("value",function(n){e.buildings=n.val(),i.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred"});i.hide()})}e.$inject=["$scope","$ionicLoading","buildingsService"],angular.module("app.buildings").controller("buildingsController",e)}(),function(){"use strict";function e(e){return{getBuildings:function(){return e.fb.database().ref("buildings")}}}e.$inject=["firebaseService"],angular.module("app.buildings").service("buildingsService",e)}(),function(){"use strict";function e(e,i,n,t,a,r){e.data={},e.login=function(){t.show(),i.login(e.data.username,e.data.password).success(function(e){t.hide(),a.go("app.buildings")}).error(function(e){r(function(){t.hide()},100);n.alert({title:"Login failed!",template:e.message})})},e.facebookLogin=function(){n.alert({title:"Facebook login",template:"Planned!"})}}e.$inject=["$scope","authService","$ionicPopup","$ionicLoading","$state","$timeout"],angular.module("app.auth").controller("authController",e)}(),function(){"use strict";function e(e,i,n,t){var a=n.fb.auth();return{login:function(n,r){var o=e.defer(),u=o.promise,l=function(e){e.isNew=null==e.displayName,o.resolve(e),t=firebase.auth().currentUser,i.$broadcast("name-changed")},s=function(e){o.reject(e)};return a.signInWithEmailAndPassword(n,r).then(l,function c(c){"auth/user-not-found"==c.code?a.createUserWithEmailAndPassword(n,r).then(l,s):s(c)}),u.success=function(e){return u.then(e),u},u.error=function(e){return u.then(null,e),u},u},updateProfile:function(n){var r=e.defer();return a.currentUser.updateProfile(n).then(function(){r.resolve("Profile updated!"),t=firebase.auth().currentUser,i.$broadcast("name-changed")},function o(o){r.reject(o)}),r.promise},logout:function(){a.signOut(),t=firebase.auth().currentUser},user:function(){return firebase.auth().currentUser}}}e.$inject=["$q","$rootScope","firebaseService","user"],angular.module("app.auth").service("authService",e)}(),function(){"use strict";function e(){var e={apiKey:"AIzaSyB5q81AGGox4i8-QL2KOtnDDfi05irgcHE",authDomain:"socialstrataideateam.firebaseapp.com",databaseURL:"https://socialstrataideateam.firebaseio.com",storageBucket:""};this.fb=firebase.initializeApp(e)}angular.module("app.firebase").service("firebaseService",e)}(),function(){"use strict";function e(e,i,n,t){var a=t.user();e.data={displayName:a?a.displayName:"",email:a?a.email:""},e.update=function(){i.show(),t.updateProfile(e.data).then(function(e){i.hide(),n.alert({title:"ProfileUpdate!",template:e})},function a(a){i.hide(),n.alert({title:"Update failed!",template:a.message})})}}e.$inject=["$scope","$ionicLoading","$ionicPopup","authService"],angular.module("app.profiles").controller("profileController",e)}(),function(){"use strict";function e(e,i){e.$on("name-changed",function(n,t){e.displayName=i.user().displayName});var n=i.user();e.displayName=n?n.displayName:"Edit Name"}e.$inject=["$scope","authService"],angular.module("app.sidemenu").controller("sidemenuController",e)}(),function(){"use strict";angular.module("app",["ionic","app.firebase","app.auth","app.sidemenu","app.buildings","app.profiles"]).value("user",null).run(["$ionicPlatform","$timeout","$rootScope",function(e,i,n){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault(),n.$broadcast("name-changed")})}])}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,i){e.state("app",{url:"/app",cache:!1,"abstract":!0,templateUrl:"views/sidemenu.html"}).state("app.buildings",{url:"/buildings",views:{menuContent:{templateUrl:"views/buildings.html"}}}).state("app.building",{url:"/buildings/:buildingId",views:{menuContent:{templateUrl:"views/building.html"}}}).state("app.profile",{url:"/profile",cache:!1,views:{menuContent:{templateUrl:"views/profile/profile.html"}}}).state("app.logout",{url:"/login",templateProvider:["authService","$state",function(e,i){e.logout(),i.go("login")}]}).state("login",{url:"/login",templateUrl:"views/auth/login.html"}),i.otherwise("/login")}])}();
//# sourceMappingURL=data:application/json;base64,
