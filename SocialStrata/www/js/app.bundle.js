!function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.groups",[])}(),function(){"use strict";angular.module("app.sidemenu",[])}(),function(){"use strict";function e(e,n,t,o){e.data={},e.login=function(){n.login(e.data.username,e.data.password).success(function(e){o.go("app.groups")}).error(function(e){t.alert({title:"Login failed!",template:"Please check your credentials!"})})}}e.$inject=["$scope","authService","$ionicPopup","$state"],angular.module("app.auth").controller("authController",e)}(),function(){"use strict";function e(e){return{login:function(n,t){var o=e.defer(),r=o.promise;return"user"==n&&"password"==t?o.resolve("Welcome "+n+"!"):o.reject("Wrong credentials!"),r.success=function(e){return r.then(e),r},r.error=function(e){return r.then(null,e),r},r}}}e.$inject=["$q"],angular.module("app.auth").service("authService",e)}(),function(){"use strict";function e(e,n){e.channels=[{name:"Channel 1",id:1},{name:"Channel 2",id:2},{name:"Channel 3",id:3},{name:"Channel 4",id:4},{name:"Channel 5",id:5},{name:"Channel 6",id:6}]}e.$inject=["$scope","$stateParams"],angular.module("app.groups").controller("groupController",e)}(),function(){"use strict";function e(e){e.groups=[{name:"Group 1",id:1},{name:"Group 2",id:2},{name:"Group 3",id:3},{name:"Group 4",id:4},{name:"Group 5",id:5},{name:"Group 6",id:6}]}e.$inject=["$scope"],angular.module("app.groups").controller("groupsController",e)}(),function(){"use strict";function e(e){}e.$inject=["$scope"],angular.module("app.sidemenu").controller("sidemenuController",e)}(),function(){"use strict";angular.module("app",["ionic","app.auth","app.sidemenu","app.groups"]).run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}])}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,n){e.state("app",{url:"/app","abstract":!0,templateUrl:"views/sidemenu.html"}).state("app.groups",{url:"/groups",views:{menuContent:{templateUrl:"views/groups.html"}}}).state("app.group",{url:"/groups/:groupId",views:{menuContent:{templateUrl:"views/group.html"}}}).state("login",{url:"/login",templateUrl:"views/auth/login.html"}),n.otherwise("/login")}])}();
//# sourceMappingURL=data:application/json;base64,
