!function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.buildings",[])}(),function(){"use strict";angular.module("app.profiles",[])}(),function(){"use strict";angular.module("app.sidemenu",[])}(),function(){"use strict";function e(e,n,i,t){e.data={},e.login=function(){n.login(e.data.username,e.data.password).success(function(e){t.go("app.buildings")}).error(function(e){i.alert({title:"Login failed!",template:"Please check your credentials!"})})}}e.$inject=["$scope","authService","$ionicPopup","$state"],angular.module("app.auth").controller("authController",e)}(),function(){"use strict";function e(e){return{login:function(n,i){var t=e.defer(),a=t.promise;return"user"==n&&"password"==i?t.resolve("Welcome "+n+"!"):t.reject("Wrong credentials!"),a.success=function(e){return a.then(e),a},a.error=function(e){return a.then(null,e),a},a},user:function(){return{username:"user",password:"password",type:Math.floor(2*Math.random())+1}}}}e.$inject=["$q"],angular.module("app.auth").service("authService",e)}(),function(){"use strict";function e(e,n){e.channels=[{name:"Channel 1",id:1},{name:"Channel 2",id:2},{name:"Channel 3",id:3},{name:"Channel 4",id:4},{name:"Channel 5",id:5},{name:"Channel 6",id:6}]}e.$inject=["$scope","$stateParams"],angular.module("app.buildings").controller("buildingController",e)}(),function(){"use strict";function e(e){e.buildings=[{name:"Building 1",id:1},{name:"Building 2",id:2},{name:"Building 3",id:3},{name:"Building 4",id:4},{name:"Building 5",id:5},{name:"Building 6",id:6}]}e.$inject=["$scope"],angular.module("app.buildings").controller("buildingsController",e)}(),function(){"use strict";function e(e){}e.$inject=["$scope"],angular.module("app.profiles").controller("landlordProfileController",e)}(),function(){"use strict";function e(e){}e.$inject=["$scope"],angular.module("app.profiles").controller("tenantProfileController",e)}(),function(){"use strict";function e(e){}e.$inject=["$scope"],angular.module("app.sidemenu").controller("sidemenuController",e)}(),function(){"use strict";angular.module("app",["ionic","app.auth","app.sidemenu","app.buildings","app.profiles"]).run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}])}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,n){e.state("app",{url:"/app","abstract":!0,templateUrl:"views/sidemenu.html"}).state("app.buildings",{url:"/buildings",views:{menuContent:{templateUrl:"views/buildings.html"}}}).state("app.building",{url:"/buildings/:buildingId",views:{menuContent:{templateUrl:"views/building.html"}}}).state("app.profile",{url:"/profile",resolve:{user:["authService",function(e){return e.user()}]},views:{menuContent:{templateProvider:["$timeout","$stateParams","user",function(e,n,i){console.log(i);var t=null;return t=1==i.type?"views/profile/landlord.html":"views/profile/tenant.html",console.log(t),t}]}}}).state("login",{url:"/login",templateUrl:"views/auth/login.html"}),n.otherwise("/login")}])}(),function(){"use strict";angular.module("app").factory("FirebaseService",function(){var e={apiKey:"AIzaSyB5q81AGGox4i8-QL2KOtnDDfi05irgcHE",authDomain:"socialstrataideateam.firebaseapp.com",databaseURL:"https://socialstrataideateam.firebaseio.com",storageBucket:""};return firebase.initializeApp(e)})}();
//# sourceMappingURL=data:application/json;base64,
