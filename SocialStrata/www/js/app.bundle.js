!function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.buildings",["app.firebase"])}(),function(){"use strict";angular.module("app.firebase",[])}(),function(){"use strict";angular.module("app.message",[])}(),function(){"use strict";angular.module("app.profiles",["app.auth"])}(),function(){"use strict";angular.module("app.sidemenu",[])}(),function(){"use strict";angular.module("app.users",["app.auth"])}(),function(){"use strict";function e(e,n,t,i,a,r){e.data={},e.login=function(){i.show(),n.login(e.data.username,e.data.password).success(function(e){i.hide(),a.go("app.buildings")}).error(function(e){r(function(){i.hide()},100);t.alert({title:"Login failed!",template:e.message})})},e.facebookLogin=function(){t.alert({title:"Facebook login",template:"Planned!"})}}e.$inject=["$scope","authService","$ionicPopup","$ionicLoading","$state","$timeout"],angular.module("app.auth").controller("authController",e)}(),function(){"use strict";function e(e,n,t,i){var a=t.fb.auth();return n.$on("name-changed",function(){var e=firebase.auth().currentUser;null!=e&&firebase.database().ref("users/"+e.uid).set({name:e.displayName,email:e.email,lastActivity:(new Date).getTime()})}),{login:function(t,r){var u=e.defer(),o=u.promise,s=function(e){e.isNew=null==e.displayName,u.resolve(e),i=firebase.auth().currentUser,n.$broadcast("name-changed")},l=function(e){u.reject(e)};return a.signInWithEmailAndPassword(t,r).then(s,function c(c){"auth/user-not-found"==c.code?a.createUserWithEmailAndPassword(t,r).then(s,l):l(c)}),o.success=function(e){return o.then(e),o},o.error=function(e){return o.then(null,e),o},o},logout:function(){a.signOut(),i=firebase.auth().currentUser},user:function(){return firebase.auth().currentUser}}}e.$inject=["$q","$rootScope","firebaseService","user"],angular.module("app.auth").service("authService",e)}(),function(){"use strict";function e(e){return{getChannelsFrom:function(n){return e.fb.database().ref("buildings/"+n+"/channels")}}}e.$inject=["firebaseService"],angular.module("app.buildings").service("buildingChannelsService",e)}(),function(){"use strict";function e(e,n,t,i){var a=i.getChannelsFrom(t.buildingId);n.show(),a.on("value",function(t){var i=t.val();i&&(e.channels=angular.extend(i.common,i.services)),n.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred."});n.hide()})}e.$inject=["$scope","$ionicLoading","$stateParams","buildingChannelsService"],angular.module("app.buildings").controller("buildingController",e)}(),function(){"use strict";function e(e,n,t){var i=t.getBuildings();n.show(),i.on("value",function(t){e.buildings=t.val(),n.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred"});n.hide()})}e.$inject=["$scope","$ionicLoading","buildingsService"],angular.module("app.buildings").controller("buildingsController",e)}(),function(){"use strict";function e(e){return{getBuildings:function(){return e.fb.database().ref("buildings")}}}e.$inject=["firebaseService"],angular.module("app.buildings").service("buildingsService",e)}(),function(){"use strict";function e(){var e={apiKey:"AIzaSyB5q81AGGox4i8-QL2KOtnDDfi05irgcHE",authDomain:"socialstrataideateam.firebaseapp.com",databaseURL:"https://socialstrataideateam.firebaseio.com",storageBucket:""};this.fb=firebase.initializeApp(e)}angular.module("app.firebase").service("firebaseService",e)}(),function(){"use strict";angular.module("app.message")}(),function(){"use strict";function e(){var e={};return e.getMessagesRef=function(){return firebase.database().ref("messages")},e}angular.module("app.message").service("messagesService",e)}(),function(){"use strict";function e(e,n,t,i,a){var r=i.user();e.data={displayName:r?r.displayName:"",email:r?r.email:""},e.update=function(){n.show(),a.updateProfile(e.data).then(function(e){n.hide(),t.alert({title:"ProfileUpdate!",template:e})},function i(i){n.hide(),t.alert({title:"Update failed!",template:i.message})})}}e.$inject=["$scope","$ionicLoading","$ionicPopup","authService","profilesService"],angular.module("app.profiles").controller("profileController",e)}(),function(){"use strict";function e(e,n,t,i){return{updateProfile:function(a){var r=e.defer();return t.user().updateProfile(a).then(function(){r.resolve("Profile updated!"),i=firebase.auth().currentUser,n.$broadcast("name-changed")},function u(u){r.reject(u)}),r.promise}}}e.$inject=["$q","$rootScope","authService","user"],angular.module("app.profiles").service("profilesService",e)}(),function(){"use strict";function e(e,n,t){e.$on("name-changed",function(){e.displayName=n.user().displayName});var i=n.user();e.displayName=i?i.displayName:"Edit Name"}e.$inject=["$scope","authService","messagesService"],angular.module("app.sidemenu").controller("sidemenuController",e)}(),function(){"use strict";function e(e,n){return{updateProfile:function(t){var i=e.defer();return n.user().updateProfile(t).then(function(){i.resolve("Profile updated!"),user=firebase.auth().currentUser,$rootScope.$broadcast("name-changed")},function a(a){i.reject(a)}),i.promise}}}e.$inject=["$q","authService"],angular.module("app.users").service("usersService",e)}(),function(){"use strict";angular.module("app",["ionic","app.firebase","app.auth","app.message","app.sidemenu","app.buildings","app.profiles"]).value("user",null).run(["$ionicPlatform","$timeout","$rootScope",function(e,n,t){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault(),t.$broadcast("name-changed")})}])}(),function(){"use strict";angular.module("app").run(["$rootScope","$location","authService",function(e,n,t){e.$on("$routeChangeStart",function(e){null==t.user()&&(e.preventDefault(),n.go("login"))})}])}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,n){e.state("app",{url:"/app",cache:!1,"abstract":!0,templateUrl:"views/sidemenu.html"}).state("app.buildings",{url:"/buildings",views:{menuContent:{templateUrl:"views/buildings.html"}}}).state("app.building",{url:"/buildings/:buildingId",views:{menuContent:{templateUrl:"views/building.html"}}}).state("app.profile",{url:"/profile",cache:!1,views:{menuContent:{templateUrl:"views/profile/profile.html"}}}).state("app.logout",{url:"/login",templateProvider:["authService","$state",function(e,n){e.logout(),n.go("login")}]}).state("login",{url:"/login",templateUrl:"views/auth/login.html"}),n.otherwise("/login")}])}();
//# sourceMappingURL=data:application/json;base64,
