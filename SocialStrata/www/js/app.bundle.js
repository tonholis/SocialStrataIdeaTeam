!function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.firebase",[])}(),function(){"use strict";angular.module("app.buildings",["app.firebase"])}(),function(){"use strict";angular.module("app.profiles",[])}(),function(){"use strict";angular.module("app.sidemenu",[])}(),function(){"use strict";function e(e,n,i,t,r,o){e.data={},e.login=function(){t.show(),n.login(e.data.username,e.data.password).success(function(e){t.hide(),r.go("app.buildings")}).error(function(e){o(function(){t.hide()},100);i.alert({title:"Login failed!",template:e.message})})},e.facebookLogin=function(){i.alert({title:"Facebook login",template:"Planned!"})}}e.$inject=["$scope","authService","$ionicPopup","$ionicLoading","$state","$timeout"],angular.module("app.auth").controller("authController",e)}(),function(){"use strict";function e(e,n){var i=n.fb.auth();return{login:function(n,t){var r=e.defer(),o=r.promise,a=function(e){e.isNew=null==e.displayName,r.resolve(e)},u=function(e){r.reject(e)};return i.signInWithEmailAndPassword(n,t).then(a,function l(l){"auth/user-not-found"==l.code?i.createUserWithEmailAndPassword(n,t).then(a,u):u(l)}),o.success=function(e){return o.then(e),o},o.error=function(e){return o.then(null,e),o},o},user:function(){return i.currentUser}}}e.$inject=["$q","firebaseService"],angular.module("app.auth").service("authService",e)}(),function(){"use strict";function e(){var e={apiKey:"AIzaSyB5q81AGGox4i8-QL2KOtnDDfi05irgcHE",authDomain:"socialstrataideateam.firebaseapp.com",databaseURL:"https://socialstrataideateam.firebaseio.com",storageBucket:""};this.fb=firebase.initializeApp(e)}angular.module("app.firebase").service("firebaseService",e)}(),function(){"use strict";function e(e){return{getChannelsFrom:function(n){return e.fb.database().ref("buildings/"+n+"/channels")}}}e.$inject=["firebaseService"],angular.module("app.buildings").service("buildingChannelsService",e)}(),function(){"use strict";function e(e,n,i,t){var r=t.getChannelsFrom(i.buildingId);n.show(),r.on("value",function(i){var t=i.val();t&&(e.channels=angular.extend(t.common,t.services)),n.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred."});n.hide()})}e.$inject=["$scope","$ionicLoading","$stateParams","buildingChannelsService"],angular.module("app.buildings").controller("buildingController",e)}(),function(){"use strict";function e(e,n,i){var t=i.getBuildings();n.show(),t.on("value",function(i){e.buildings=i.val(),n.hide()},function(e){console.log("error reading: "+e.code);$ionicPopup.alert({title:"Ops!",template:"Sorry! An error ocurred"});n.hide()})}e.$inject=["$scope","$ionicLoading","buildingsService"],angular.module("app.buildings").controller("buildingsController",e)}(),function(){"use strict";function e(e){return{getBuildings:function(){return e.fb.database().ref("buildings")}}}e.$inject=["firebaseService"],angular.module("app.buildings").service("buildingsService",e)}(),function(){"use strict";function e(e){}e.$inject=["$scope"],angular.module("app.profiles").controller("landlordProfileController",e)}(),function(){"use strict";function e(e){console.log("tenantProfileController")}e.$inject=["$scope"],angular.module("app.profiles").controller("tenantProfileController",e)}(),function(){"use strict";function e(e){}e.$inject=["$scope"],angular.module("app.sidemenu").controller("sidemenuController",e)}(),function(){"use strict";angular.module("app",["ionic","app.firebase","app.auth","app.sidemenu","app.buildings","app.profiles"]).run(["$ionicPlatform",function(e){e.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}])}(),function(){"use strict";angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,n){e.state("app",{url:"/app","abstract":!0,templateUrl:"views/sidemenu.html"}).state("app.buildings",{url:"/buildings",views:{menuContent:{templateUrl:"views/buildings.html"}}}).state("app.building",{url:"/buildings/:buildingId",views:{menuContent:{templateUrl:"views/building.html"}}}).state("app.profile",{url:"/profile",resolve:{user:["authService",function(e){return e.user()}]},views:{menuContent:{templateProvider:["$timeout","$stateParams","user",function(e,n,i){console.log(i);var t=null;return t=1==i.type?"views/profile/landlord.html":"views/profile/tenant.html",console.log(t),t}]}}}).state("login",{url:"/login",templateUrl:"views/auth/login.html"}),n.otherwise("/login")}])}();
//# sourceMappingURL=data:application/json;base64,
